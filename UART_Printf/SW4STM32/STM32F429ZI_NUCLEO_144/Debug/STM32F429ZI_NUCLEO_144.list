
STM32F429ZI_NUCLEO_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  080024c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  8 .bss          0000007c  20000080  20000080  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200000fc  200000fc  00020080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000aaf7  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001bf7  00000000  00000000  0002aba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00005e30  00000000  00000000  0002c79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  000325d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258e0  00000000  00000000  00033430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c52d  00000000  00000000  00058d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e097c  00000000  00000000  0006523d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000187c  00000000  00000000  00145c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800236c 	.word	0x0800236c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800236c 	.word	0x0800236c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <BSP_LED_Init+0x68>)
 8000598:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800059a:	4604      	mov	r4, r0
 800059c:	bb08      	cbnz	r0, 80005e2 <BSP_LED_Init+0x4e>
 800059e:	9001      	str	r0, [sp, #4]
 80005a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a2:	f042 0202 	orr.w	r2, r2, #2
 80005a6:	631a      	str	r2, [r3, #48]	; 0x30
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005b4:	4d13      	ldr	r5, [pc, #76]	; (8000604 <BSP_LED_Init+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005b6:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005ba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005be:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2700      	movs	r7, #0
 80005c2:	2301      	movs	r3, #1
 80005c4:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005c8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005ca:	2302      	movs	r3, #2
 80005cc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005ce:	f000 f8f3 	bl	80007b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80005d6:	463a      	mov	r2, r7
 80005d8:	4631      	mov	r1, r6
 80005da:	f000 f9d3 	bl	8000984 <HAL_GPIO_WritePin>
}
 80005de:	b009      	add	sp, #36	; 0x24
 80005e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80005e2:	2200      	movs	r2, #0
 80005e4:	9202      	str	r2, [sp, #8]
 80005e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e8:	f042 0202 	orr.w	r2, r2, #2
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 0302 	and.w	r3, r3, #2
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	9b02      	ldr	r3, [sp, #8]
 80005f8:	e7db      	b.n	80005b2 <BSP_LED_Init+0x1e>
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	08002384 	.word	0x08002384
 8000604:	20000000 	.word	0x20000000

08000608 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <BSP_LED_On+0x14>)
 800060a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <BSP_LED_On+0x18>)
 8000610:	2201      	movs	r2, #1
 8000612:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000616:	f000 b9b5 	b.w	8000984 <HAL_GPIO_WritePin>
 800061a:	bf00      	nop
 800061c:	08002384 	.word	0x08002384
 8000620:	20000000 	.word	0x20000000

08000624 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000624:	490f      	ldr	r1, [pc, #60]	; (8000664 <SystemInit+0x40>)
 8000626:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800062a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <SystemInit+0x44>)
 8000634:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000636:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000638:	f042 0201 	orr.w	r2, r2, #1
 800063c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800063e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000646:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800064a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <SystemInit+0x48>)
 800064e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000656:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000658:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800065a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800065e:	608b      	str	r3, [r1, #8]
#endif
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00
 8000668:	40023800 	.word	0x40023800
 800066c:	24003010 	.word	0x24003010

08000670 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000670:	4770      	bx	lr
	...

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_InitTick+0x3c>)
 8000678:	4e0e      	ldr	r6, [pc, #56]	; (80006b4 <HAL_InitTick+0x40>)
{
 800067a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000680:	7830      	ldrb	r0, [r6, #0]
 8000682:	fbb3 f3f0 	udiv	r3, r3, r0
 8000686:	6810      	ldr	r0, [r2, #0]
 8000688:	fbb0 f0f3 	udiv	r0, r0, r3
 800068c:	f000 f880 	bl	8000790 <HAL_SYSTICK_Config>
 8000690:	4604      	mov	r4, r0
 8000692:	b950      	cbnz	r0, 80006aa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000694:	2d0f      	cmp	r5, #15
 8000696:	d808      	bhi.n	80006aa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000698:	4602      	mov	r2, r0
 800069a:	4629      	mov	r1, r5
 800069c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006a0:	f000 f844 	bl	800072c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a4:	6075      	str	r5, [r6, #4]
 80006a6:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
 80006ac:	e7fc      	b.n	80006a8 <HAL_InitTick+0x34>
 80006ae:	bf00      	nop
 80006b0:	20000010 	.word	0x20000010
 80006b4:	20000014 	.word	0x20000014

080006b8 <HAL_Init>:
{
 80006b8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_Init+0x28>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f81b 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d2:	200f      	movs	r0, #15
 80006d4:	f7ff ffce 	bl	8000674 <HAL_InitTick>
  HAL_MspInit();
 80006d8:	f7ff ffca 	bl	8000670 <HAL_MspInit>
}
 80006dc:	2000      	movs	r0, #0
 80006de:	bd08      	pop	{r3, pc}
 80006e0:	40023c00 	.word	0x40023c00

080006e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x10>)
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x14>)
 80006e8:	6811      	ldr	r1, [r2, #0]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	440b      	add	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	20000014 	.word	0x20000014

080006fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006fc:	4b01      	ldr	r3, [pc, #4]	; (8000704 <HAL_GetTick+0x8>)
 80006fe:	6818      	ldr	r0, [r3, #0]
}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	2000009c 	.word	0x2000009c

08000708 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800070a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000714:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000718:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800071c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000724:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	68dc      	ldr	r4, [r3, #12]
 8000732:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000736:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	2d04      	cmp	r5, #4
 800073e:	bf28      	it	cs
 8000740:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000748:	bf8c      	ite	hi
 800074a:	3c03      	subhi	r4, #3
 800074c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074e:	fa03 f505 	lsl.w	r5, r3, r5
 8000752:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000756:	40a3      	lsls	r3, r4
 8000758:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800075e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	bfac      	ite	ge
 8000766:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	4a08      	ldrlt	r2, [pc, #32]	; (800078c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	bfb8      	it	lt
 8000772:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	b2db      	uxtb	r3, r3
 8000778:	bfaa      	itet	ge
 800077a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	e000ed14 	.word	0xe000ed14

08000790 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	3801      	subs	r0, #1
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d20b      	bcs.n	80007b0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000798:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	21f0      	movs	r1, #240	; 0xf0
 80007a2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007aa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007b0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007bc:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000980 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c0:	4a6d      	ldr	r2, [pc, #436]	; (8000978 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007c2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80007c6:	2401      	movs	r4, #1
 80007c8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ca:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80007ce:	43ac      	bics	r4, r5
 80007d0:	f040 80b9 	bne.w	8000946 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007d4:	684d      	ldr	r5, [r1, #4]
 80007d6:	f005 0403 	and.w	r4, r5, #3
 80007da:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007de:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007e0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007e6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007ec:	d834      	bhi.n	8000858 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80007ee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007f0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007f4:	68cf      	ldr	r7, [r1, #12]
 80007f6:	fa07 f708 	lsl.w	r7, r7, r8
 80007fa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80007fe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000800:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000802:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000806:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800080a:	409f      	lsls	r7, r3
 800080c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000810:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000812:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000814:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000818:	688f      	ldr	r7, [r1, #8]
 800081a:	fa07 f708 	lsl.w	r7, r7, r8
 800081e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000822:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000824:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000826:	d119      	bne.n	800085c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000828:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800082c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000830:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000834:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000838:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800083c:	f04f 0e0f 	mov.w	lr, #15
 8000840:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000844:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000848:	690f      	ldr	r7, [r1, #16]
 800084a:	fa07 f70b 	lsl.w	r7, r7, fp
 800084e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000852:	f8ca 7020 	str.w	r7, [sl, #32]
 8000856:	e001      	b.n	800085c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000858:	2c03      	cmp	r4, #3
 800085a:	d1da      	bne.n	8000812 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800085c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800085e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000862:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000864:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000866:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800086a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800086c:	d06b      	beq.n	8000946 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	f04f 0a00 	mov.w	sl, #0
 8000872:	f8cd a004 	str.w	sl, [sp, #4]
 8000876:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800087a:	4c40      	ldr	r4, [pc, #256]	; (800097c <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000880:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000884:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000888:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800088c:	9601      	str	r6, [sp, #4]
 800088e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000890:	f023 0603 	bic.w	r6, r3, #3
 8000894:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000898:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800089c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80008a0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008a4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008a8:	270f      	movs	r7, #15
 80008aa:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ae:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008b0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b4:	d04e      	beq.n	8000954 <HAL_GPIO_Init+0x19c>
 80008b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008ba:	42a0      	cmp	r0, r4
 80008bc:	d04c      	beq.n	8000958 <HAL_GPIO_Init+0x1a0>
 80008be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008c2:	42a0      	cmp	r0, r4
 80008c4:	d04a      	beq.n	800095c <HAL_GPIO_Init+0x1a4>
 80008c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008ca:	42a0      	cmp	r0, r4
 80008cc:	d048      	beq.n	8000960 <HAL_GPIO_Init+0x1a8>
 80008ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008d2:	42a0      	cmp	r0, r4
 80008d4:	d046      	beq.n	8000964 <HAL_GPIO_Init+0x1ac>
 80008d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008da:	42a0      	cmp	r0, r4
 80008dc:	d044      	beq.n	8000968 <HAL_GPIO_Init+0x1b0>
 80008de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008e2:	42a0      	cmp	r0, r4
 80008e4:	d042      	beq.n	800096c <HAL_GPIO_Init+0x1b4>
 80008e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008ea:	42a0      	cmp	r0, r4
 80008ec:	d040      	beq.n	8000970 <HAL_GPIO_Init+0x1b8>
 80008ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008f2:	42a0      	cmp	r0, r4
 80008f4:	d03e      	beq.n	8000974 <HAL_GPIO_Init+0x1bc>
 80008f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008fa:	42a0      	cmp	r0, r4
 80008fc:	bf0c      	ite	eq
 80008fe:	2409      	moveq	r4, #9
 8000900:	240a      	movne	r4, #10
 8000902:	fa04 f40e 	lsl.w	r4, r4, lr
 8000906:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000908:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 800090a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800090c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000910:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000912:	bf54      	ite	pl
 8000914:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000916:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800091a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800091c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800091e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000920:	bf54      	ite	pl
 8000922:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000924:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000928:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800092a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800092c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800092e:	bf54      	ite	pl
 8000930:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000932:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000936:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000938:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800093a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800093c:	bf54      	ite	pl
 800093e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000940:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000944:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000946:	3301      	adds	r3, #1
 8000948:	2b10      	cmp	r3, #16
 800094a:	f47f af3b 	bne.w	80007c4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800094e:	b003      	add	sp, #12
 8000950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000954:	4654      	mov	r4, sl
 8000956:	e7d4      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 8000958:	2401      	movs	r4, #1
 800095a:	e7d2      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 800095c:	2402      	movs	r4, #2
 800095e:	e7d0      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 8000960:	2403      	movs	r4, #3
 8000962:	e7ce      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 8000964:	2404      	movs	r4, #4
 8000966:	e7cc      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 8000968:	2405      	movs	r4, #5
 800096a:	e7ca      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 800096c:	2406      	movs	r4, #6
 800096e:	e7c8      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 8000970:	2407      	movs	r4, #7
 8000972:	e7c6      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 8000974:	2408      	movs	r4, #8
 8000976:	e7c4      	b.n	8000902 <HAL_GPIO_Init+0x14a>
 8000978:	40013c00 	.word	0x40013c00
 800097c:	40020000 	.word	0x40020000
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000984:	b10a      	cbz	r2, 800098a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000986:	6181      	str	r1, [r0, #24]
  }
}
 8000988:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800098a:	0409      	lsls	r1, r1, #16
 800098c:	e7fb      	b.n	8000986 <HAL_GPIO_WritePin+0x2>
	...

08000990 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000990:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000998:	4d18      	ldr	r5, [pc, #96]	; (80009fc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_PWREx_EnableOverDrive+0x70>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 80009b2:	f7ff fea3 	bl	80006fc <HAL_GetTick>
 80009b6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80009b8:	686b      	ldr	r3, [r5, #4]
 80009ba:	03da      	lsls	r2, r3, #15
 80009bc:	d50b      	bpl.n	80009d6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009c0:	4d0e      	ldr	r5, [pc, #56]	; (80009fc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80009c2:	2201      	movs	r2, #1
 80009c4:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 80009c6:	f7ff fe99 	bl	80006fc <HAL_GetTick>
 80009ca:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009cc:	686b      	ldr	r3, [r5, #4]
 80009ce:	039b      	lsls	r3, r3, #14
 80009d0:	d50a      	bpl.n	80009e8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80009d2:	2000      	movs	r0, #0
 80009d4:	e006      	b.n	80009e4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009d6:	f7ff fe91 	bl	80006fc <HAL_GetTick>
 80009da:	1b00      	subs	r0, r0, r4
 80009dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009e0:	d9ea      	bls.n	80009b8 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80009e2:	2003      	movs	r0, #3
}
 80009e4:	b003      	add	sp, #12
 80009e6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009e8:	f7ff fe88 	bl	80006fc <HAL_GetTick>
 80009ec:	1b00      	subs	r0, r0, r4
 80009ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009f2:	d9eb      	bls.n	80009cc <HAL_PWREx_EnableOverDrive+0x3c>
 80009f4:	e7f5      	b.n	80009e2 <HAL_PWREx_EnableOverDrive+0x52>
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000
 8000a00:	420e0000 	.word	0x420e0000

08000a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a08:	4604      	mov	r4, r0
 8000a0a:	b340      	cbz	r0, 8000a5e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a0c:	6803      	ldr	r3, [r0, #0]
 8000a0e:	07dd      	lsls	r5, r3, #31
 8000a10:	d410      	bmi.n	8000a34 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	0798      	lsls	r0, r3, #30
 8000a16:	d45e      	bmi.n	8000ad6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	071a      	lsls	r2, r3, #28
 8000a1c:	f100 80a0 	bmi.w	8000b60 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	075b      	lsls	r3, r3, #29
 8000a24:	f100 80c0 	bmi.w	8000ba8 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a28:	69a0      	ldr	r0, [r4, #24]
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	f040 8128 	bne.w	8000c80 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000a30:	2000      	movs	r0, #0
 8000a32:	e02b      	b.n	8000a8c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a34:	4b8f      	ldr	r3, [pc, #572]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	f002 020c 	and.w	r2, r2, #12
 8000a3c:	2a04      	cmp	r2, #4
 8000a3e:	d007      	beq.n	8000a50 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a46:	2a08      	cmp	r2, #8
 8000a48:	d10b      	bne.n	8000a62 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	0251      	lsls	r1, r2, #9
 8000a4e:	d508      	bpl.n	8000a62 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a50:	4b88      	ldr	r3, [pc, #544]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	039a      	lsls	r2, r3, #14
 8000a56:	d5dc      	bpl.n	8000a12 <HAL_RCC_OscConfig+0xe>
 8000a58:	6863      	ldr	r3, [r4, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1d9      	bne.n	8000a12 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000a5e:	2001      	movs	r0, #1
 8000a60:	e014      	b.n	8000a8c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a62:	6862      	ldr	r2, [r4, #4]
 8000a64:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a68:	d113      	bne.n	8000a92 <HAL_RCC_OscConfig+0x8e>
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a72:	f7ff fe43 	bl	80006fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a76:	4e7f      	ldr	r6, [pc, #508]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000a78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a7a:	6833      	ldr	r3, [r6, #0]
 8000a7c:	039b      	lsls	r3, r3, #14
 8000a7e:	d4c8      	bmi.n	8000a12 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a80:	f7ff fe3c 	bl	80006fc <HAL_GetTick>
 8000a84:	1b40      	subs	r0, r0, r5
 8000a86:	2864      	cmp	r0, #100	; 0x64
 8000a88:	d9f7      	bls.n	8000a7a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000a8a:	2003      	movs	r0, #3
}
 8000a8c:	b002      	add	sp, #8
 8000a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a92:	4d78      	ldr	r5, [pc, #480]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000a94:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	d107      	bne.n	8000aac <HAL_RCC_OscConfig+0xa8>
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa0:	602b      	str	r3, [r5, #0]
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000aaa:	e7e2      	b.n	8000a72 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab0:	602b      	str	r3, [r5, #0]
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d1d9      	bne.n	8000a72 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000abe:	f7ff fe1d 	bl	80006fc <HAL_GetTick>
 8000ac2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	039f      	lsls	r7, r3, #14
 8000ac8:	d5a3      	bpl.n	8000a12 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aca:	f7ff fe17 	bl	80006fc <HAL_GetTick>
 8000ace:	1b80      	subs	r0, r0, r6
 8000ad0:	2864      	cmp	r0, #100	; 0x64
 8000ad2:	d9f7      	bls.n	8000ac4 <HAL_RCC_OscConfig+0xc0>
 8000ad4:	e7d9      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ad6:	4b67      	ldr	r3, [pc, #412]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	f012 0f0c 	tst.w	r2, #12
 8000ade:	d007      	beq.n	8000af0 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ae6:	2a08      	cmp	r2, #8
 8000ae8:	d111      	bne.n	8000b0e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	025e      	lsls	r6, r3, #9
 8000aee:	d40e      	bmi.n	8000b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000af0:	4a60      	ldr	r2, [pc, #384]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	079d      	lsls	r5, r3, #30
 8000af6:	d502      	bpl.n	8000afe <HAL_RCC_OscConfig+0xfa>
 8000af8:	68e3      	ldr	r3, [r4, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d1af      	bne.n	8000a5e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	6921      	ldr	r1, [r4, #16]
 8000b02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b0a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b0c:	e784      	b.n	8000a18 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b0e:	68e2      	ldr	r2, [r4, #12]
 8000b10:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <HAL_RCC_OscConfig+0x274>)
 8000b12:	b1b2      	cbz	r2, 8000b42 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b18:	f7ff fdf0 	bl	80006fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b1c:	4d55      	ldr	r5, [pc, #340]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000b1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b20:	682b      	ldr	r3, [r5, #0]
 8000b22:	0798      	lsls	r0, r3, #30
 8000b24:	d507      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b26:	682b      	ldr	r3, [r5, #0]
 8000b28:	6922      	ldr	r2, [r4, #16]
 8000b2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b32:	602b      	str	r3, [r5, #0]
 8000b34:	e770      	b.n	8000a18 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b36:	f7ff fde1 	bl	80006fc <HAL_GetTick>
 8000b3a:	1b80      	subs	r0, r0, r6
 8000b3c:	2802      	cmp	r0, #2
 8000b3e:	d9ef      	bls.n	8000b20 <HAL_RCC_OscConfig+0x11c>
 8000b40:	e7a3      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000b42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b44:	f7ff fdda 	bl	80006fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b48:	4e4a      	ldr	r6, [pc, #296]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000b4a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b4c:	6833      	ldr	r3, [r6, #0]
 8000b4e:	0799      	lsls	r1, r3, #30
 8000b50:	f57f af62 	bpl.w	8000a18 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b54:	f7ff fdd2 	bl	80006fc <HAL_GetTick>
 8000b58:	1b40      	subs	r0, r0, r5
 8000b5a:	2802      	cmp	r0, #2
 8000b5c:	d9f6      	bls.n	8000b4c <HAL_RCC_OscConfig+0x148>
 8000b5e:	e794      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b60:	6962      	ldr	r2, [r4, #20]
 8000b62:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <HAL_RCC_OscConfig+0x274>)
 8000b64:	b182      	cbz	r2, 8000b88 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000b66:	2201      	movs	r2, #1
 8000b68:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000b6c:	f7ff fdc6 	bl	80006fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b70:	4e40      	ldr	r6, [pc, #256]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000b72:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b74:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b76:	079f      	lsls	r7, r3, #30
 8000b78:	f53f af52 	bmi.w	8000a20 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b7c:	f7ff fdbe 	bl	80006fc <HAL_GetTick>
 8000b80:	1b40      	subs	r0, r0, r5
 8000b82:	2802      	cmp	r0, #2
 8000b84:	d9f6      	bls.n	8000b74 <HAL_RCC_OscConfig+0x170>
 8000b86:	e780      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000b88:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000b8c:	f7ff fdb6 	bl	80006fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b90:	4e38      	ldr	r6, [pc, #224]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000b92:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b94:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b96:	0798      	lsls	r0, r3, #30
 8000b98:	f57f af42 	bpl.w	8000a20 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b9c:	f7ff fdae 	bl	80006fc <HAL_GetTick>
 8000ba0:	1b40      	subs	r0, r0, r5
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9f6      	bls.n	8000b94 <HAL_RCC_OscConfig+0x190>
 8000ba6:	e770      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bac:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000bb0:	d128      	bne.n	8000c04 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bba:	641a      	str	r2, [r3, #64]	; 0x40
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bc6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc8:	4d2c      	ldr	r5, [pc, #176]	; (8000c7c <HAL_RCC_OscConfig+0x278>)
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	05d9      	lsls	r1, r3, #23
 8000bce:	d51b      	bpl.n	8000c08 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd0:	68a3      	ldr	r3, [r4, #8]
 8000bd2:	4d28      	ldr	r5, [pc, #160]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d127      	bne.n	8000c28 <HAL_RCC_OscConfig+0x224>
 8000bd8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000be0:	f7ff fd8c 	bl	80006fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000be4:	4e23      	ldr	r6, [pc, #140]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000be6:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bec:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000bee:	079b      	lsls	r3, r3, #30
 8000bf0:	d539      	bpl.n	8000c66 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	f43f af18 	beq.w	8000a28 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bf8:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_RCC_OscConfig+0x270>)
 8000bfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	e711      	b.n	8000a28 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000c04:	2700      	movs	r7, #0
 8000c06:	e7df      	b.n	8000bc8 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c10:	f7ff fd74 	bl	80006fc <HAL_GetTick>
 8000c14:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c16:	682b      	ldr	r3, [r5, #0]
 8000c18:	05da      	lsls	r2, r3, #23
 8000c1a:	d4d9      	bmi.n	8000bd0 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c1c:	f7ff fd6e 	bl	80006fc <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f7      	bls.n	8000c16 <HAL_RCC_OscConfig+0x212>
 8000c26:	e730      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d104      	bne.n	8000c36 <HAL_RCC_OscConfig+0x232>
 8000c2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	672b      	str	r3, [r5, #112]	; 0x70
 8000c34:	e7d0      	b.n	8000bd8 <HAL_RCC_OscConfig+0x1d4>
 8000c36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	672a      	str	r2, [r5, #112]	; 0x70
 8000c3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c40:	f022 0204 	bic.w	r2, r2, #4
 8000c44:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1ca      	bne.n	8000be0 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8000c4a:	f7ff fd57 	bl	80006fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c4e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c56:	0798      	lsls	r0, r3, #30
 8000c58:	d5cb      	bpl.n	8000bf2 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c5a:	f7ff fd4f 	bl	80006fc <HAL_GetTick>
 8000c5e:	1b80      	subs	r0, r0, r6
 8000c60:	4540      	cmp	r0, r8
 8000c62:	d9f7      	bls.n	8000c54 <HAL_RCC_OscConfig+0x250>
 8000c64:	e711      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c66:	f7ff fd49 	bl	80006fc <HAL_GetTick>
 8000c6a:	1b40      	subs	r0, r0, r5
 8000c6c:	4540      	cmp	r0, r8
 8000c6e:	d9bd      	bls.n	8000bec <HAL_RCC_OscConfig+0x1e8>
 8000c70:	e70b      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	42470000 	.word	0x42470000
 8000c7c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c80:	4d36      	ldr	r5, [pc, #216]	; (8000d5c <HAL_RCC_OscConfig+0x358>)
 8000c82:	68ab      	ldr	r3, [r5, #8]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d03d      	beq.n	8000d08 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_RCC_OscConfig+0x35c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000c92:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c94:	d12b      	bne.n	8000cee <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8000c96:	f7ff fd31 	bl	80006fc <HAL_GetTick>
 8000c9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	0199      	lsls	r1, r3, #6
 8000ca0:	d41f      	bmi.n	8000ce2 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ca2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000caa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000cae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000cb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cb6:	0852      	lsrs	r2, r2, #1
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cbe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cc2:	4d26      	ldr	r5, [pc, #152]	; (8000d5c <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fd18 	bl	80006fc <HAL_GetTick>
 8000ccc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	019a      	lsls	r2, r3, #6
 8000cd2:	f53f aead 	bmi.w	8000a30 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd6:	f7ff fd11 	bl	80006fc <HAL_GetTick>
 8000cda:	1b00      	subs	r0, r0, r4
 8000cdc:	2802      	cmp	r0, #2
 8000cde:	d9f6      	bls.n	8000cce <HAL_RCC_OscConfig+0x2ca>
 8000ce0:	e6d3      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce2:	f7ff fd0b 	bl	80006fc <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	2802      	cmp	r0, #2
 8000cea:	d9d7      	bls.n	8000c9c <HAL_RCC_OscConfig+0x298>
 8000cec:	e6cd      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000cee:	f7ff fd05 	bl	80006fc <HAL_GetTick>
 8000cf2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	019b      	lsls	r3, r3, #6
 8000cf8:	f57f ae9a 	bpl.w	8000a30 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cfc:	f7ff fcfe 	bl	80006fc <HAL_GetTick>
 8000d00:	1b00      	subs	r0, r0, r4
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d9f6      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x2f0>
 8000d06:	e6c0      	b.n	8000a8a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d08:	2801      	cmp	r0, #1
 8000d0a:	f43f aebf 	beq.w	8000a8c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000d0e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d10:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d12:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d16:	4291      	cmp	r1, r2
 8000d18:	f47f aea1 	bne.w	8000a5e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d1c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d22:	428a      	cmp	r2, r1
 8000d24:	f47f ae9b 	bne.w	8000a5e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000d28:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000d2a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000d2e:	401a      	ands	r2, r3
 8000d30:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000d34:	f47f ae93 	bne.w	8000a5e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d3a:	0852      	lsrs	r2, r2, #1
 8000d3c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000d40:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000d42:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000d46:	f47f ae8a 	bne.w	8000a5e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000d4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d4c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d50:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000d54:	f43f ae6c 	beq.w	8000a30 <HAL_RCC_OscConfig+0x2c>
 8000d58:	e681      	b.n	8000a5e <HAL_RCC_OscConfig+0x5a>
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	42470000 	.word	0x42470000

08000d64 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d64:	4913      	ldr	r1, [pc, #76]	; (8000db4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000d66:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d68:	688b      	ldr	r3, [r1, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d01c      	beq.n	8000dac <HAL_RCC_GetSysClockFreq+0x48>
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d11c      	bne.n	8000db0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d76:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d78:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d7a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d7c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d80:	bf14      	ite	ne
 8000d82:	480d      	ldrne	r0, [pc, #52]	; (8000db8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d84:	480d      	ldreq	r0, [pc, #52]	; (8000dbc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d86:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d92:	fba1 0100 	umull	r0, r1, r1, r0
 8000d96:	f7ff fa7b 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000da2:	3301      	adds	r3, #1
 8000da4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000da6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000daa:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <HAL_RCC_GetSysClockFreq+0x54>)
 8000dae:	e7fc      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000db2:	e7fa      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x46>
 8000db4:	40023800 	.word	0x40023800
 8000db8:	007a1200 	.word	0x007a1200
 8000dbc:	00f42400 	.word	0x00f42400

08000dc0 <HAL_RCC_ClockConfig>:
{
 8000dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	b910      	cbnz	r0, 8000dd0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000dca:	2001      	movs	r0, #1
}
 8000dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <HAL_RCC_ClockConfig+0x124>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	f002 020f 	and.w	r2, r2, #15
 8000dd8:	428a      	cmp	r2, r1
 8000dda:	d328      	bcc.n	8000e2e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	0797      	lsls	r7, r2, #30
 8000de0:	d42d      	bmi.n	8000e3e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000de2:	07d0      	lsls	r0, r2, #31
 8000de4:	d441      	bmi.n	8000e6a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000de6:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <HAL_RCC_ClockConfig+0x124>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	f002 020f 	and.w	r2, r2, #15
 8000dee:	42aa      	cmp	r2, r5
 8000df0:	d866      	bhi.n	8000ec0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	0751      	lsls	r1, r2, #29
 8000df6:	d46c      	bmi.n	8000ed2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df8:	0713      	lsls	r3, r2, #28
 8000dfa:	d507      	bpl.n	8000e0c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dfc:	4a3a      	ldr	r2, [pc, #232]	; (8000ee8 <HAL_RCC_ClockConfig+0x128>)
 8000dfe:	6921      	ldr	r1, [r4, #16]
 8000e00:	6893      	ldr	r3, [r2, #8]
 8000e02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e0a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e0c:	f7ff ffaa 	bl	8000d64 <HAL_RCC_GetSysClockFreq>
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <HAL_RCC_ClockConfig+0x128>)
 8000e12:	4a36      	ldr	r2, [pc, #216]	; (8000eec <HAL_RCC_ClockConfig+0x12c>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e1a:	5cd3      	ldrb	r3, [r2, r3]
 8000e1c:	40d8      	lsrs	r0, r3
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <HAL_RCC_ClockConfig+0x130>)
 8000e20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <HAL_RCC_ClockConfig+0x134>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f7ff fc25 	bl	8000674 <HAL_InitTick>
  return HAL_OK;
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e7ce      	b.n	8000dcc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d1c6      	bne.n	8000dca <HAL_RCC_ClockConfig+0xa>
 8000e3c:	e7ce      	b.n	8000ddc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_RCC_ClockConfig+0x128>)
 8000e40:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e44:	bf1e      	ittt	ne
 8000e46:	6899      	ldrne	r1, [r3, #8]
 8000e48:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000e4c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e4e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e50:	bf42      	ittt	mi
 8000e52:	6899      	ldrmi	r1, [r3, #8]
 8000e54:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000e58:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e5a:	4923      	ldr	r1, [pc, #140]	; (8000ee8 <HAL_RCC_ClockConfig+0x128>)
 8000e5c:	68a0      	ldr	r0, [r4, #8]
 8000e5e:	688b      	ldr	r3, [r1, #8]
 8000e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e64:	4303      	orrs	r3, r0
 8000e66:	608b      	str	r3, [r1, #8]
 8000e68:	e7bb      	b.n	8000de2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e6a:	6862      	ldr	r2, [r4, #4]
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_RCC_ClockConfig+0x128>)
 8000e6e:	2a01      	cmp	r2, #1
 8000e70:	d11c      	bne.n	8000eac <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	d0a7      	beq.n	8000dca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e7a:	4e1b      	ldr	r6, [pc, #108]	; (8000ee8 <HAL_RCC_ClockConfig+0x128>)
 8000e7c:	68b3      	ldr	r3, [r6, #8]
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e86:	f7ff fc39 	bl	80006fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e8e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e90:	68b3      	ldr	r3, [r6, #8]
 8000e92:	6862      	ldr	r2, [r4, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e9c:	d0a3      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e9e:	f7ff fc2d 	bl	80006fc <HAL_GetTick>
 8000ea2:	1bc0      	subs	r0, r0, r7
 8000ea4:	4540      	cmp	r0, r8
 8000ea6:	d9f3      	bls.n	8000e90 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	e78f      	b.n	8000dcc <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eac:	1e91      	subs	r1, r2, #2
 8000eae:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eb2:	d802      	bhi.n	8000eba <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000eb8:	e7de      	b.n	8000e78 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eba:	f013 0f02 	tst.w	r3, #2
 8000ebe:	e7db      	b.n	8000e78 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec0:	b2ea      	uxtb	r2, r5
 8000ec2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	42ab      	cmp	r3, r5
 8000ecc:	f47f af7d 	bne.w	8000dca <HAL_RCC_ClockConfig+0xa>
 8000ed0:	e78f      	b.n	8000df2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ed2:	4905      	ldr	r1, [pc, #20]	; (8000ee8 <HAL_RCC_ClockConfig+0x128>)
 8000ed4:	68e0      	ldr	r0, [r4, #12]
 8000ed6:	688b      	ldr	r3, [r1, #8]
 8000ed8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000edc:	4303      	orrs	r3, r0
 8000ede:	608b      	str	r3, [r1, #8]
 8000ee0:	e78a      	b.n	8000df8 <HAL_RCC_ClockConfig+0x38>
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	0800238e 	.word	0x0800238e
 8000ef0:	20000010 	.word	0x20000010
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f06:	6810      	ldr	r0, [r2, #0]
}
 8000f08:	40d8      	lsrs	r0, r3
 8000f0a:	4770      	bx	lr
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	0800239e 	.word	0x0800239e
 8000f14:	20000010 	.word	0x20000010

08000f18 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f26:	6810      	ldr	r0, [r2, #0]
}
 8000f28:	40d8      	lsrs	r0, r3
 8000f2a:	4770      	bx	lr
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	0800239e 	.word	0x0800239e
 8000f34:	20000010 	.word	0x20000010

08000f38 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f38:	6802      	ldr	r2, [r0, #0]
 8000f3a:	68c1      	ldr	r1, [r0, #12]
 8000f3c:	6913      	ldr	r3, [r2, #16]
 8000f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f42:	430b      	orrs	r3, r1
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f46:	6113      	str	r3, [r2, #16]
{
 8000f48:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f4a:	6883      	ldr	r3, [r0, #8]
 8000f4c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000f4e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f50:	4303      	orrs	r3, r0
 8000f52:	6968      	ldr	r0, [r5, #20]
 8000f54:	4303      	orrs	r3, r0
 8000f56:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8000f58:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8000f5c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f60:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f62:	430b      	orrs	r3, r1
 8000f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f66:	6953      	ldr	r3, [r2, #20]
 8000f68:	69a9      	ldr	r1, [r5, #24]
 8000f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <UART_SetConfig+0xb8>)
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d003      	beq.n	8000f80 <UART_SetConfig+0x48>
 8000f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d123      	bne.n	8000fc8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f80:	f7ff ffca 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f84:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f86:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f8c:	e9d5 4600 	ldrd	r4, r6, [r5]
 8000f90:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f94:	d11b      	bne.n	8000fce <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f96:	19b2      	adds	r2, r6, r6
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	415b      	adcs	r3, r3
 8000f9e:	f7ff f977 	bl	8000290 <__aeabi_uldivmod>
 8000fa2:	2164      	movs	r1, #100	; 0x64
 8000fa4:	fbb0 f5f1 	udiv	r5, r0, r1
 8000fa8:	fb01 0315 	mls	r3, r1, r5, r0
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	3332      	adds	r3, #50	; 0x32
 8000fb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb4:	f003 0207 	and.w	r2, r3, #7
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8000fbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000fc2:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fc4:	60a3      	str	r3, [r4, #8]
  }
}
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000fc8:	f7ff ff96 	bl	8000ef8 <HAL_RCC_GetPCLK1Freq>
 8000fcc:	e7da      	b.n	8000f84 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fce:	00b2      	lsls	r2, r6, #2
 8000fd0:	0fb3      	lsrs	r3, r6, #30
 8000fd2:	f7ff f95d 	bl	8000290 <__aeabi_uldivmod>
 8000fd6:	2264      	movs	r2, #100	; 0x64
 8000fd8:	fbb0 f1f2 	udiv	r1, r0, r2
 8000fdc:	fb02 0311 	mls	r3, r2, r1, r0
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	3332      	adds	r3, #50	; 0x32
 8000fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fe8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000fec:	e7ea      	b.n	8000fc4 <UART_SetConfig+0x8c>
 8000fee:	bf00      	nop
 8000ff0:	40011000 	.word	0x40011000

08000ff4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	460e      	mov	r6, r1
 8000ffa:	4617      	mov	r7, r2
 8000ffc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	6813      	ldr	r3, [r2, #0]
 8001002:	ea36 0303 	bics.w	r3, r6, r3
 8001006:	d101      	bne.n	800100c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
 800100a:	e028      	b.n	800105e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800100c:	1c6b      	adds	r3, r5, #1
 800100e:	d0f7      	beq.n	8001000 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001010:	b125      	cbz	r5, 800101c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001012:	f7ff fb73 	bl	80006fc <HAL_GetTick>
 8001016:	1bc0      	subs	r0, r0, r7
 8001018:	4285      	cmp	r5, r0
 800101a:	d2f0      	bcs.n	8000ffe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800101c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800101e:	f102 030c 	add.w	r3, r2, #12
 8001022:	e853 3f00 	ldrex	r3, [r3]
 8001026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800102a:	320c      	adds	r2, #12
 800102c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001030:	6821      	ldr	r1, [r4, #0]
 8001032:	2800      	cmp	r0, #0
 8001034:	d1f2      	bne.n	800101c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001036:	f101 0314 	add.w	r3, r1, #20
 800103a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800103e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001042:	f101 0014 	add.w	r0, r1, #20
 8001046:	e840 3200 	strex	r2, r3, [r0]
 800104a:	2a00      	cmp	r2, #0
 800104c:	d1f3      	bne.n	8001036 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800104e:	2320      	movs	r3, #32
 8001050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8001054:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001058:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800105c:	2003      	movs	r0, #3
}
 800105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001060 <HAL_UART_Init>:
{
 8001060:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001062:	4604      	mov	r4, r0
 8001064:	b340      	cbz	r0, 80010b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001066:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800106a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800106e:	b91b      	cbnz	r3, 8001078 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001070:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001074:	f000 f970 	bl	8001358 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001078:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800107a:	2324      	movs	r3, #36	; 0x24
 800107c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001080:	68d3      	ldr	r3, [r2, #12]
 8001082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001086:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff ff55 	bl	8000f38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800109e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010a6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80010aa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010ac:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80010ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80010b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80010b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	e7fc      	b.n	80010b6 <HAL_UART_Init+0x56>

080010bc <HAL_UART_Transmit>:
{
 80010bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010be:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80010c0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80010c4:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80010c6:	2a20      	cmp	r2, #32
{
 80010c8:	4604      	mov	r4, r0
 80010ca:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80010cc:	d149      	bne.n	8001162 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d045      	beq.n	800115e <HAL_UART_Transmit+0xa2>
 80010d2:	2f00      	cmp	r7, #0
 80010d4:	d043      	beq.n	800115e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80010d6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80010da:	2a01      	cmp	r2, #1
 80010dc:	d041      	beq.n	8001162 <HAL_UART_Transmit+0xa6>
 80010de:	2201      	movs	r2, #1
 80010e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010e4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010e6:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010e8:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80010ee:	f7ff fb05 	bl	80006fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010f2:	68a1      	ldr	r1, [r4, #8]
 80010f4:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80010f6:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80010fc:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80010fe:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001100:	d103      	bne.n	800110a <HAL_UART_Transmit+0x4e>
 8001102:	6921      	ldr	r1, [r4, #16]
 8001104:	b909      	cbnz	r1, 800110a <HAL_UART_Transmit+0x4e>
 8001106:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001108:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800110a:	2100      	movs	r1, #0
 800110c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001110:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001112:	b289      	uxth	r1, r1
 8001114:	b941      	cbnz	r1, 8001128 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	4620      	mov	r0, r4
 800111a:	f7ff ff6b 	bl	8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800111e:	b960      	cbnz	r0, 800113a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001120:	2320      	movs	r3, #32
 8001122:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001126:	e009      	b.n	800113c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	4620      	mov	r0, r4
 800112c:	e9cd 2300 	strd	r2, r3, [sp]
 8001130:	f7ff ff60 	bl	8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001134:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001138:	b110      	cbz	r0, 8001140 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
}
 800113c:	b003      	add	sp, #12
 800113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001140:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8001142:	b94e      	cbnz	r6, 8001158 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001144:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001148:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800114c:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800114e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001150:	3901      	subs	r1, #1
 8001152:	b289      	uxth	r1, r1
 8001154:	84e1      	strh	r1, [r4, #38]	; 0x26
 8001156:	e7db      	b.n	8001110 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001158:	f816 1b01 	ldrb.w	r1, [r6], #1
 800115c:	e7f6      	b.n	800114c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800115e:	2001      	movs	r0, #1
 8001160:	e7ec      	b.n	800113c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001162:	2002      	movs	r0, #2
 8001164:	e7ea      	b.n	800113c <HAL_UART_Transmit+0x80>
	...

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800116c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800116e:	e003      	b.n	8001178 <LoopCopyDataInit>

08001170 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001172:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001174:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001176:	3104      	adds	r1, #4

08001178 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800117c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001180:	d3f6      	bcc.n	8001170 <CopyDataInit>
  ldr  r2, =_sbss
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001184:	e002      	b.n	800118c <LoopFillZerobss>

08001186 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001186:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001188:	f842 3b04 	str.w	r3, [r2], #4

0800118c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001190:	d3f9      	bcc.n	8001186 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001192:	f7ff fa47 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f000 f92f 	bl	80013f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f000 f851 	bl	8001240 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80011a4:	080024c0 	.word	0x080024c0
  ldr  r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011ac:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80011b0:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80011b4:	200000fc 	.word	0x200000fc

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>

080011ba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80011ba:	b570      	push	{r4, r5, r6, lr}
 80011bc:	460d      	mov	r5, r1
 80011be:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	460e      	mov	r6, r1
 80011c2:	1b73      	subs	r3, r6, r5
 80011c4:	429c      	cmp	r4, r3
 80011c6:	dc01      	bgt.n	80011cc <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80011c8:	4620      	mov	r0, r4
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	e7f5      	b.n	80011c2 <_read+0x8>

080011d6 <_write>:

int _write(int file, char *ptr, int len)
{
 80011d6:	b570      	push	{r4, r5, r6, lr}
 80011d8:	460d      	mov	r5, r1
 80011da:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	460e      	mov	r6, r1
 80011de:	1b73      	subs	r3, r6, r5
 80011e0:	429c      	cmp	r4, r3
 80011e2:	dc01      	bgt.n	80011e8 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80011e4:	4620      	mov	r0, r4
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80011e8:	f816 0b01 	ldrb.w	r0, [r6], #1
 80011ec:	f000 f8a4 	bl	8001338 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	e7f5      	b.n	80011de <_write+0x8>
	...

080011f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <_sbrk+0x2c>)
 80011f6:	6811      	ldr	r1, [r2, #0]
{
 80011f8:	b508      	push	{r3, lr}
 80011fa:	4603      	mov	r3, r0
	if (heap_end == 0)
 80011fc:	b909      	cbnz	r1, 8001202 <_sbrk+0xe>
		heap_end = &end;
 80011fe:	4909      	ldr	r1, [pc, #36]	; (8001224 <_sbrk+0x30>)
 8001200:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001202:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001204:	4669      	mov	r1, sp
 8001206:	4403      	add	r3, r0
 8001208:	428b      	cmp	r3, r1
 800120a:	d906      	bls.n	800121a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800120c:	f000 f8ee 	bl	80013ec <__errno>
 8001210:	230c      	movs	r3, #12
 8001212:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001218:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800121a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800121c:	e7fc      	b.n	8001218 <_sbrk+0x24>
 800121e:	bf00      	nop
 8001220:	200000a0 	.word	0x200000a0
 8001224:	20000100 	.word	0x20000100

08001228 <_close>:

int _close(int file)
{
	return -1;
}
 8001228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800122c:	4770      	bx	lr

0800122e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001234:	2000      	movs	r0, #0
 8001236:	4770      	bx	lr

08001238 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001238:	2001      	movs	r0, #1
 800123a:	4770      	bx	lr

0800123c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800123c:	2000      	movs	r0, #0
 800123e:	4770      	bx	lr

08001240 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001240:	b500      	push	{lr}
 8001242:	b095      	sub	sp, #84	; 0x54
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001244:	f7ff fa38 	bl	80006b8 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	4b35      	ldr	r3, [pc, #212]	; (8001320 <main+0xe0>)
 800124a:	2100      	movs	r1, #0
 800124c:	9101      	str	r1, [sp, #4]
 800124e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001250:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	9b01      	ldr	r3, [sp, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <main+0xe4>)
 8001262:	9102      	str	r1, [sp, #8]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	9b02      	ldr	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001276:	2501      	movs	r5, #1
 8001278:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800127e:	e9cd 5308 	strd	r5, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001286:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001288:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 360;
 800128c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001290:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001294:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800129a:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f7ff fbb2 	bl	8000a04 <HAL_RCC_OscConfig>
 80012a0:	b118      	cbz	r0, 80012aa <main+0x6a>
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80012a2:	4628      	mov	r0, r5
 80012a4:	f7ff f9b0 	bl	8000608 <BSP_LED_On>
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <main+0x68>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012aa:	f7ff fb71 	bl	8000990 <HAL_PWREx_EnableOverDrive>
 80012ae:	b118      	cbz	r0, 80012b8 <main+0x78>
  BSP_LED_On(LED2);
 80012b0:	4628      	mov	r0, r5
 80012b2:	f7ff f9a9 	bl	8000608 <BSP_LED_On>
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <main+0x76>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80012b8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80012be:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012cc:	2105      	movs	r1, #5
 80012ce:	a803      	add	r0, sp, #12
 80012d0:	f7ff fd76 	bl	8000dc0 <HAL_RCC_ClockConfig>
 80012d4:	4604      	mov	r4, r0
  BSP_LED_On(LED2);
 80012d6:	4628      	mov	r0, r5
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d8:	b114      	cbz	r4, 80012e0 <main+0xa0>
  BSP_LED_On(LED2);
 80012da:	f7ff f995 	bl	8000608 <BSP_LED_On>
  while (1)
 80012de:	e7fe      	b.n	80012de <main+0x9e>
  BSP_LED_Init(LED2);
 80012e0:	f7ff f958 	bl	8000594 <BSP_LED_Init>
  UartHandle.Instance        = USARTx;
 80012e4:	4810      	ldr	r0, [pc, #64]	; (8001328 <main+0xe8>)
  UartHandle.Init.BaudRate   = 9600;
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <main+0xec>)
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80012e8:	6184      	str	r4, [r0, #24]
  UartHandle.Init.BaudRate   = 9600;
 80012ea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012ee:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 80012f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012f6:	6103      	str	r3, [r0, #16]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80012f8:	230c      	movs	r3, #12
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80012fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80012fe:	6143      	str	r3, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001302:	f7ff fead 	bl	8001060 <HAL_UART_Init>
 8001306:	b118      	cbz	r0, 8001310 <main+0xd0>
  BSP_LED_On(LED2);
 8001308:	4628      	mov	r0, r5
 800130a:	f7ff f97d 	bl	8000608 <BSP_LED_On>
  while (1)
 800130e:	e7fe      	b.n	800130e <main+0xce>
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <main+0xf0>)
 8001312:	f000 f89d 	bl	8001450 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <main+0xf4>)
 8001318:	f000 f89a 	bl	8001450 <iprintf>
  while (1)
 800131c:	e7fe      	b.n	800131c <main+0xdc>
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000
 8001328:	200000a8 	.word	0x200000a8
 800132c:	40004800 	.word	0x40004800
 8001330:	080023a6 	.word	0x080023a6
 8001334:	080023f3 	.word	0x080023f3

08001338 <__io_putchar>:
{
 8001338:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 800133a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 800133e:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8001340:	2201      	movs	r2, #1
 8001342:	a901      	add	r1, sp, #4
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <__io_putchar+0x1c>)
 8001346:	f7ff feb9 	bl	80010bc <HAL_UART_Transmit>
}
 800134a:	9801      	ldr	r0, [sp, #4]
 800134c:	b003      	add	sp, #12
 800134e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001352:	bf00      	nop
 8001354:	200000a8 	.word	0x200000a8

08001358 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001358:	b510      	push	{r4, lr}
 800135a:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_UART_MspInit+0x78>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800135e:	481d      	ldr	r0, [pc, #116]	; (80013d4 <HAL_UART_MspInit+0x7c>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8001360:	2200      	movs	r2, #0
 8001362:	9200      	str	r2, [sp, #0]
 8001364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001366:	f041 0108 	orr.w	r1, r1, #8
 800136a:	6319      	str	r1, [r3, #48]	; 0x30
 800136c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136e:	f001 0108 	and.w	r1, r1, #8
 8001372:	9100      	str	r1, [sp, #0]
 8001374:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800137a:	f041 0108 	orr.w	r1, r1, #8
 800137e:	6319      	str	r1, [r3, #48]	; 0x30
 8001380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001382:	f001 0108 	and.w	r1, r1, #8
 8001386:	9101      	str	r1, [sp, #4]
 8001388:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
 800138a:	9202      	str	r2, [sp, #8]
 800138c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800139c:	f44f 7280 	mov.w	r2, #256	; 0x100
  USARTx_CLK_ENABLE();
 80013a0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2101      	movs	r1, #1
 80013aa:	2303      	movs	r3, #3
 80013ac:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80013b0:	2407      	movs	r4, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80013b2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80013b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80013b6:	f7ff f9ff 	bl	80007b8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80013ba:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_UART_MspInit+0x7c>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80013c0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013c2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80013c4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013c6:	f7ff f9f7 	bl	80007b8 <HAL_GPIO_Init>
}
 80013ca:	b008      	add	sp, #32
 80013cc:	bd10      	pop	{r4, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020c00 	.word	0x40020c00

080013d8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80013d8:	4770      	bx	lr

080013da <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler>

080013dc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler>

080013de <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler>

080013e0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler>

080013e2 <SVC_Handler>:
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:
 80013e4:	4770      	bx	lr

080013e6 <PendSV_Handler>:
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
    HAL_IncTick();
 80013e8:	f7ff b97c 	b.w	80006e4 <HAL_IncTick>

080013ec <__errno>:
 80013ec:	4b01      	ldr	r3, [pc, #4]	; (80013f4 <__errno+0x8>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000001c 	.word	0x2000001c

080013f8 <__libc_init_array>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	4d0d      	ldr	r5, [pc, #52]	; (8001430 <__libc_init_array+0x38>)
 80013fc:	4c0d      	ldr	r4, [pc, #52]	; (8001434 <__libc_init_array+0x3c>)
 80013fe:	1b64      	subs	r4, r4, r5
 8001400:	10a4      	asrs	r4, r4, #2
 8001402:	2600      	movs	r6, #0
 8001404:	42a6      	cmp	r6, r4
 8001406:	d109      	bne.n	800141c <__libc_init_array+0x24>
 8001408:	4d0b      	ldr	r5, [pc, #44]	; (8001438 <__libc_init_array+0x40>)
 800140a:	4c0c      	ldr	r4, [pc, #48]	; (800143c <__libc_init_array+0x44>)
 800140c:	f000 ffae 	bl	800236c <_init>
 8001410:	1b64      	subs	r4, r4, r5
 8001412:	10a4      	asrs	r4, r4, #2
 8001414:	2600      	movs	r6, #0
 8001416:	42a6      	cmp	r6, r4
 8001418:	d105      	bne.n	8001426 <__libc_init_array+0x2e>
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001420:	4798      	blx	r3
 8001422:	3601      	adds	r6, #1
 8001424:	e7ee      	b.n	8001404 <__libc_init_array+0xc>
 8001426:	f855 3b04 	ldr.w	r3, [r5], #4
 800142a:	4798      	blx	r3
 800142c:	3601      	adds	r6, #1
 800142e:	e7f2      	b.n	8001416 <__libc_init_array+0x1e>
 8001430:	080024b8 	.word	0x080024b8
 8001434:	080024b8 	.word	0x080024b8
 8001438:	080024b8 	.word	0x080024b8
 800143c:	080024bc 	.word	0x080024bc

08001440 <memset>:
 8001440:	4402      	add	r2, r0
 8001442:	4603      	mov	r3, r0
 8001444:	4293      	cmp	r3, r2
 8001446:	d100      	bne.n	800144a <memset+0xa>
 8001448:	4770      	bx	lr
 800144a:	f803 1b01 	strb.w	r1, [r3], #1
 800144e:	e7f9      	b.n	8001444 <memset+0x4>

08001450 <iprintf>:
 8001450:	b40f      	push	{r0, r1, r2, r3}
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <iprintf+0x2c>)
 8001454:	b513      	push	{r0, r1, r4, lr}
 8001456:	681c      	ldr	r4, [r3, #0]
 8001458:	b124      	cbz	r4, 8001464 <iprintf+0x14>
 800145a:	69a3      	ldr	r3, [r4, #24]
 800145c:	b913      	cbnz	r3, 8001464 <iprintf+0x14>
 800145e:	4620      	mov	r0, r4
 8001460:	f000 f866 	bl	8001530 <__sinit>
 8001464:	ab05      	add	r3, sp, #20
 8001466:	9a04      	ldr	r2, [sp, #16]
 8001468:	68a1      	ldr	r1, [r4, #8]
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	4620      	mov	r0, r4
 800146e:	f000 f9bd 	bl	80017ec <_vfiprintf_r>
 8001472:	b002      	add	sp, #8
 8001474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001478:	b004      	add	sp, #16
 800147a:	4770      	bx	lr
 800147c:	2000001c 	.word	0x2000001c

08001480 <std>:
 8001480:	2300      	movs	r3, #0
 8001482:	b510      	push	{r4, lr}
 8001484:	4604      	mov	r4, r0
 8001486:	e9c0 3300 	strd	r3, r3, [r0]
 800148a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800148e:	6083      	str	r3, [r0, #8]
 8001490:	8181      	strh	r1, [r0, #12]
 8001492:	6643      	str	r3, [r0, #100]	; 0x64
 8001494:	81c2      	strh	r2, [r0, #14]
 8001496:	6183      	str	r3, [r0, #24]
 8001498:	4619      	mov	r1, r3
 800149a:	2208      	movs	r2, #8
 800149c:	305c      	adds	r0, #92	; 0x5c
 800149e:	f7ff ffcf 	bl	8001440 <memset>
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <std+0x38>)
 80014a4:	6263      	str	r3, [r4, #36]	; 0x24
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <std+0x3c>)
 80014a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <std+0x40>)
 80014ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <std+0x44>)
 80014b0:	6224      	str	r4, [r4, #32]
 80014b2:	6323      	str	r3, [r4, #48]	; 0x30
 80014b4:	bd10      	pop	{r4, pc}
 80014b6:	bf00      	nop
 80014b8:	08001d95 	.word	0x08001d95
 80014bc:	08001db7 	.word	0x08001db7
 80014c0:	08001def 	.word	0x08001def
 80014c4:	08001e13 	.word	0x08001e13

080014c8 <_cleanup_r>:
 80014c8:	4901      	ldr	r1, [pc, #4]	; (80014d0 <_cleanup_r+0x8>)
 80014ca:	f000 b8af 	b.w	800162c <_fwalk_reent>
 80014ce:	bf00      	nop
 80014d0:	080020ed 	.word	0x080020ed

080014d4 <__sfmoreglue>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2268      	movs	r2, #104	; 0x68
 80014d8:	1e4d      	subs	r5, r1, #1
 80014da:	4355      	muls	r5, r2
 80014dc:	460e      	mov	r6, r1
 80014de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014e2:	f000 f8e5 	bl	80016b0 <_malloc_r>
 80014e6:	4604      	mov	r4, r0
 80014e8:	b140      	cbz	r0, 80014fc <__sfmoreglue+0x28>
 80014ea:	2100      	movs	r1, #0
 80014ec:	e9c0 1600 	strd	r1, r6, [r0]
 80014f0:	300c      	adds	r0, #12
 80014f2:	60a0      	str	r0, [r4, #8]
 80014f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014f8:	f7ff ffa2 	bl	8001440 <memset>
 80014fc:	4620      	mov	r0, r4
 80014fe:	bd70      	pop	{r4, r5, r6, pc}

08001500 <__sfp_lock_acquire>:
 8001500:	4801      	ldr	r0, [pc, #4]	; (8001508 <__sfp_lock_acquire+0x8>)
 8001502:	f000 b8b3 	b.w	800166c <__retarget_lock_acquire_recursive>
 8001506:	bf00      	nop
 8001508:	200000ed 	.word	0x200000ed

0800150c <__sfp_lock_release>:
 800150c:	4801      	ldr	r0, [pc, #4]	; (8001514 <__sfp_lock_release+0x8>)
 800150e:	f000 b8ae 	b.w	800166e <__retarget_lock_release_recursive>
 8001512:	bf00      	nop
 8001514:	200000ed 	.word	0x200000ed

08001518 <__sinit_lock_acquire>:
 8001518:	4801      	ldr	r0, [pc, #4]	; (8001520 <__sinit_lock_acquire+0x8>)
 800151a:	f000 b8a7 	b.w	800166c <__retarget_lock_acquire_recursive>
 800151e:	bf00      	nop
 8001520:	200000ee 	.word	0x200000ee

08001524 <__sinit_lock_release>:
 8001524:	4801      	ldr	r0, [pc, #4]	; (800152c <__sinit_lock_release+0x8>)
 8001526:	f000 b8a2 	b.w	800166e <__retarget_lock_release_recursive>
 800152a:	bf00      	nop
 800152c:	200000ee 	.word	0x200000ee

08001530 <__sinit>:
 8001530:	b510      	push	{r4, lr}
 8001532:	4604      	mov	r4, r0
 8001534:	f7ff fff0 	bl	8001518 <__sinit_lock_acquire>
 8001538:	69a3      	ldr	r3, [r4, #24]
 800153a:	b11b      	cbz	r3, 8001544 <__sinit+0x14>
 800153c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001540:	f7ff bff0 	b.w	8001524 <__sinit_lock_release>
 8001544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001548:	6523      	str	r3, [r4, #80]	; 0x50
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <__sinit+0x68>)
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <__sinit+0x6c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	62a2      	str	r2, [r4, #40]	; 0x28
 8001552:	42a3      	cmp	r3, r4
 8001554:	bf04      	itt	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	61a3      	streq	r3, [r4, #24]
 800155a:	4620      	mov	r0, r4
 800155c:	f000 f820 	bl	80015a0 <__sfp>
 8001560:	6060      	str	r0, [r4, #4]
 8001562:	4620      	mov	r0, r4
 8001564:	f000 f81c 	bl	80015a0 <__sfp>
 8001568:	60a0      	str	r0, [r4, #8]
 800156a:	4620      	mov	r0, r4
 800156c:	f000 f818 	bl	80015a0 <__sfp>
 8001570:	2200      	movs	r2, #0
 8001572:	60e0      	str	r0, [r4, #12]
 8001574:	2104      	movs	r1, #4
 8001576:	6860      	ldr	r0, [r4, #4]
 8001578:	f7ff ff82 	bl	8001480 <std>
 800157c:	68a0      	ldr	r0, [r4, #8]
 800157e:	2201      	movs	r2, #1
 8001580:	2109      	movs	r1, #9
 8001582:	f7ff ff7d 	bl	8001480 <std>
 8001586:	68e0      	ldr	r0, [r4, #12]
 8001588:	2202      	movs	r2, #2
 800158a:	2112      	movs	r1, #18
 800158c:	f7ff ff78 	bl	8001480 <std>
 8001590:	2301      	movs	r3, #1
 8001592:	61a3      	str	r3, [r4, #24]
 8001594:	e7d2      	b.n	800153c <__sinit+0xc>
 8001596:	bf00      	nop
 8001598:	08002418 	.word	0x08002418
 800159c:	080014c9 	.word	0x080014c9

080015a0 <__sfp>:
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	4607      	mov	r7, r0
 80015a4:	f7ff ffac 	bl	8001500 <__sfp_lock_acquire>
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <__sfp+0x84>)
 80015aa:	681e      	ldr	r6, [r3, #0]
 80015ac:	69b3      	ldr	r3, [r6, #24]
 80015ae:	b913      	cbnz	r3, 80015b6 <__sfp+0x16>
 80015b0:	4630      	mov	r0, r6
 80015b2:	f7ff ffbd 	bl	8001530 <__sinit>
 80015b6:	3648      	adds	r6, #72	; 0x48
 80015b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015bc:	3b01      	subs	r3, #1
 80015be:	d503      	bpl.n	80015c8 <__sfp+0x28>
 80015c0:	6833      	ldr	r3, [r6, #0]
 80015c2:	b30b      	cbz	r3, 8001608 <__sfp+0x68>
 80015c4:	6836      	ldr	r6, [r6, #0]
 80015c6:	e7f7      	b.n	80015b8 <__sfp+0x18>
 80015c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015cc:	b9d5      	cbnz	r5, 8001604 <__sfp+0x64>
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <__sfp+0x88>)
 80015d0:	60e3      	str	r3, [r4, #12]
 80015d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015d6:	6665      	str	r5, [r4, #100]	; 0x64
 80015d8:	f000 f847 	bl	800166a <__retarget_lock_init_recursive>
 80015dc:	f7ff ff96 	bl	800150c <__sfp_lock_release>
 80015e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015e8:	6025      	str	r5, [r4, #0]
 80015ea:	61a5      	str	r5, [r4, #24]
 80015ec:	2208      	movs	r2, #8
 80015ee:	4629      	mov	r1, r5
 80015f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015f4:	f7ff ff24 	bl	8001440 <memset>
 80015f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001600:	4620      	mov	r0, r4
 8001602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001604:	3468      	adds	r4, #104	; 0x68
 8001606:	e7d9      	b.n	80015bc <__sfp+0x1c>
 8001608:	2104      	movs	r1, #4
 800160a:	4638      	mov	r0, r7
 800160c:	f7ff ff62 	bl	80014d4 <__sfmoreglue>
 8001610:	4604      	mov	r4, r0
 8001612:	6030      	str	r0, [r6, #0]
 8001614:	2800      	cmp	r0, #0
 8001616:	d1d5      	bne.n	80015c4 <__sfp+0x24>
 8001618:	f7ff ff78 	bl	800150c <__sfp_lock_release>
 800161c:	230c      	movs	r3, #12
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	e7ee      	b.n	8001600 <__sfp+0x60>
 8001622:	bf00      	nop
 8001624:	08002418 	.word	0x08002418
 8001628:	ffff0001 	.word	0xffff0001

0800162c <_fwalk_reent>:
 800162c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001630:	4606      	mov	r6, r0
 8001632:	4688      	mov	r8, r1
 8001634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001638:	2700      	movs	r7, #0
 800163a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800163e:	f1b9 0901 	subs.w	r9, r9, #1
 8001642:	d505      	bpl.n	8001650 <_fwalk_reent+0x24>
 8001644:	6824      	ldr	r4, [r4, #0]
 8001646:	2c00      	cmp	r4, #0
 8001648:	d1f7      	bne.n	800163a <_fwalk_reent+0xe>
 800164a:	4638      	mov	r0, r7
 800164c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001650:	89ab      	ldrh	r3, [r5, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d907      	bls.n	8001666 <_fwalk_reent+0x3a>
 8001656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800165a:	3301      	adds	r3, #1
 800165c:	d003      	beq.n	8001666 <_fwalk_reent+0x3a>
 800165e:	4629      	mov	r1, r5
 8001660:	4630      	mov	r0, r6
 8001662:	47c0      	blx	r8
 8001664:	4307      	orrs	r7, r0
 8001666:	3568      	adds	r5, #104	; 0x68
 8001668:	e7e9      	b.n	800163e <_fwalk_reent+0x12>

0800166a <__retarget_lock_init_recursive>:
 800166a:	4770      	bx	lr

0800166c <__retarget_lock_acquire_recursive>:
 800166c:	4770      	bx	lr

0800166e <__retarget_lock_release_recursive>:
 800166e:	4770      	bx	lr

08001670 <sbrk_aligned>:
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	4e0e      	ldr	r6, [pc, #56]	; (80016ac <sbrk_aligned+0x3c>)
 8001674:	460c      	mov	r4, r1
 8001676:	6831      	ldr	r1, [r6, #0]
 8001678:	4605      	mov	r5, r0
 800167a:	b911      	cbnz	r1, 8001682 <sbrk_aligned+0x12>
 800167c:	f000 fb7a 	bl	8001d74 <_sbrk_r>
 8001680:	6030      	str	r0, [r6, #0]
 8001682:	4621      	mov	r1, r4
 8001684:	4628      	mov	r0, r5
 8001686:	f000 fb75 	bl	8001d74 <_sbrk_r>
 800168a:	1c43      	adds	r3, r0, #1
 800168c:	d00a      	beq.n	80016a4 <sbrk_aligned+0x34>
 800168e:	1cc4      	adds	r4, r0, #3
 8001690:	f024 0403 	bic.w	r4, r4, #3
 8001694:	42a0      	cmp	r0, r4
 8001696:	d007      	beq.n	80016a8 <sbrk_aligned+0x38>
 8001698:	1a21      	subs	r1, r4, r0
 800169a:	4628      	mov	r0, r5
 800169c:	f000 fb6a 	bl	8001d74 <_sbrk_r>
 80016a0:	3001      	adds	r0, #1
 80016a2:	d101      	bne.n	80016a8 <sbrk_aligned+0x38>
 80016a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80016a8:	4620      	mov	r0, r4
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	200000f4 	.word	0x200000f4

080016b0 <_malloc_r>:
 80016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b4:	1ccd      	adds	r5, r1, #3
 80016b6:	f025 0503 	bic.w	r5, r5, #3
 80016ba:	3508      	adds	r5, #8
 80016bc:	2d0c      	cmp	r5, #12
 80016be:	bf38      	it	cc
 80016c0:	250c      	movcc	r5, #12
 80016c2:	2d00      	cmp	r5, #0
 80016c4:	4607      	mov	r7, r0
 80016c6:	db01      	blt.n	80016cc <_malloc_r+0x1c>
 80016c8:	42a9      	cmp	r1, r5
 80016ca:	d905      	bls.n	80016d8 <_malloc_r+0x28>
 80016cc:	230c      	movs	r3, #12
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	2600      	movs	r6, #0
 80016d2:	4630      	mov	r0, r6
 80016d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016d8:	4e2e      	ldr	r6, [pc, #184]	; (8001794 <_malloc_r+0xe4>)
 80016da:	f000 fdbb 	bl	8002254 <__malloc_lock>
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	461c      	mov	r4, r3
 80016e2:	bb34      	cbnz	r4, 8001732 <_malloc_r+0x82>
 80016e4:	4629      	mov	r1, r5
 80016e6:	4638      	mov	r0, r7
 80016e8:	f7ff ffc2 	bl	8001670 <sbrk_aligned>
 80016ec:	1c43      	adds	r3, r0, #1
 80016ee:	4604      	mov	r4, r0
 80016f0:	d14d      	bne.n	800178e <_malloc_r+0xde>
 80016f2:	6834      	ldr	r4, [r6, #0]
 80016f4:	4626      	mov	r6, r4
 80016f6:	2e00      	cmp	r6, #0
 80016f8:	d140      	bne.n	800177c <_malloc_r+0xcc>
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	4631      	mov	r1, r6
 80016fe:	4638      	mov	r0, r7
 8001700:	eb04 0803 	add.w	r8, r4, r3
 8001704:	f000 fb36 	bl	8001d74 <_sbrk_r>
 8001708:	4580      	cmp	r8, r0
 800170a:	d13a      	bne.n	8001782 <_malloc_r+0xd2>
 800170c:	6821      	ldr	r1, [r4, #0]
 800170e:	3503      	adds	r5, #3
 8001710:	1a6d      	subs	r5, r5, r1
 8001712:	f025 0503 	bic.w	r5, r5, #3
 8001716:	3508      	adds	r5, #8
 8001718:	2d0c      	cmp	r5, #12
 800171a:	bf38      	it	cc
 800171c:	250c      	movcc	r5, #12
 800171e:	4629      	mov	r1, r5
 8001720:	4638      	mov	r0, r7
 8001722:	f7ff ffa5 	bl	8001670 <sbrk_aligned>
 8001726:	3001      	adds	r0, #1
 8001728:	d02b      	beq.n	8001782 <_malloc_r+0xd2>
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	442b      	add	r3, r5
 800172e:	6023      	str	r3, [r4, #0]
 8001730:	e00e      	b.n	8001750 <_malloc_r+0xa0>
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	1b52      	subs	r2, r2, r5
 8001736:	d41e      	bmi.n	8001776 <_malloc_r+0xc6>
 8001738:	2a0b      	cmp	r2, #11
 800173a:	d916      	bls.n	800176a <_malloc_r+0xba>
 800173c:	1961      	adds	r1, r4, r5
 800173e:	42a3      	cmp	r3, r4
 8001740:	6025      	str	r5, [r4, #0]
 8001742:	bf18      	it	ne
 8001744:	6059      	strne	r1, [r3, #4]
 8001746:	6863      	ldr	r3, [r4, #4]
 8001748:	bf08      	it	eq
 800174a:	6031      	streq	r1, [r6, #0]
 800174c:	5162      	str	r2, [r4, r5]
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	4638      	mov	r0, r7
 8001752:	f104 060b 	add.w	r6, r4, #11
 8001756:	f000 fd83 	bl	8002260 <__malloc_unlock>
 800175a:	f026 0607 	bic.w	r6, r6, #7
 800175e:	1d23      	adds	r3, r4, #4
 8001760:	1af2      	subs	r2, r6, r3
 8001762:	d0b6      	beq.n	80016d2 <_malloc_r+0x22>
 8001764:	1b9b      	subs	r3, r3, r6
 8001766:	50a3      	str	r3, [r4, r2]
 8001768:	e7b3      	b.n	80016d2 <_malloc_r+0x22>
 800176a:	6862      	ldr	r2, [r4, #4]
 800176c:	42a3      	cmp	r3, r4
 800176e:	bf0c      	ite	eq
 8001770:	6032      	streq	r2, [r6, #0]
 8001772:	605a      	strne	r2, [r3, #4]
 8001774:	e7ec      	b.n	8001750 <_malloc_r+0xa0>
 8001776:	4623      	mov	r3, r4
 8001778:	6864      	ldr	r4, [r4, #4]
 800177a:	e7b2      	b.n	80016e2 <_malloc_r+0x32>
 800177c:	4634      	mov	r4, r6
 800177e:	6876      	ldr	r6, [r6, #4]
 8001780:	e7b9      	b.n	80016f6 <_malloc_r+0x46>
 8001782:	230c      	movs	r3, #12
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4638      	mov	r0, r7
 8001788:	f000 fd6a 	bl	8002260 <__malloc_unlock>
 800178c:	e7a1      	b.n	80016d2 <_malloc_r+0x22>
 800178e:	6025      	str	r5, [r4, #0]
 8001790:	e7de      	b.n	8001750 <_malloc_r+0xa0>
 8001792:	bf00      	nop
 8001794:	200000f0 	.word	0x200000f0

08001798 <__sfputc_r>:
 8001798:	6893      	ldr	r3, [r2, #8]
 800179a:	3b01      	subs	r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	b410      	push	{r4}
 80017a0:	6093      	str	r3, [r2, #8]
 80017a2:	da08      	bge.n	80017b6 <__sfputc_r+0x1e>
 80017a4:	6994      	ldr	r4, [r2, #24]
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	db01      	blt.n	80017ae <__sfputc_r+0x16>
 80017aa:	290a      	cmp	r1, #10
 80017ac:	d103      	bne.n	80017b6 <__sfputc_r+0x1e>
 80017ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017b2:	f000 bb33 	b.w	8001e1c <__swbuf_r>
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	1c58      	adds	r0, r3, #1
 80017ba:	6010      	str	r0, [r2, #0]
 80017bc:	7019      	strb	r1, [r3, #0]
 80017be:	4608      	mov	r0, r1
 80017c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <__sfputs_r>:
 80017c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c8:	4606      	mov	r6, r0
 80017ca:	460f      	mov	r7, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	18d5      	adds	r5, r2, r3
 80017d0:	42ac      	cmp	r4, r5
 80017d2:	d101      	bne.n	80017d8 <__sfputs_r+0x12>
 80017d4:	2000      	movs	r0, #0
 80017d6:	e007      	b.n	80017e8 <__sfputs_r+0x22>
 80017d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017dc:	463a      	mov	r2, r7
 80017de:	4630      	mov	r0, r6
 80017e0:	f7ff ffda 	bl	8001798 <__sfputc_r>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	d1f3      	bne.n	80017d0 <__sfputs_r+0xa>
 80017e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017ec <_vfiprintf_r>:
 80017ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f0:	460d      	mov	r5, r1
 80017f2:	b09d      	sub	sp, #116	; 0x74
 80017f4:	4614      	mov	r4, r2
 80017f6:	4698      	mov	r8, r3
 80017f8:	4606      	mov	r6, r0
 80017fa:	b118      	cbz	r0, 8001804 <_vfiprintf_r+0x18>
 80017fc:	6983      	ldr	r3, [r0, #24]
 80017fe:	b90b      	cbnz	r3, 8001804 <_vfiprintf_r+0x18>
 8001800:	f7ff fe96 	bl	8001530 <__sinit>
 8001804:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <_vfiprintf_r+0x240>)
 8001806:	429d      	cmp	r5, r3
 8001808:	d11b      	bne.n	8001842 <_vfiprintf_r+0x56>
 800180a:	6875      	ldr	r5, [r6, #4]
 800180c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800180e:	07d9      	lsls	r1, r3, #31
 8001810:	d405      	bmi.n	800181e <_vfiprintf_r+0x32>
 8001812:	89ab      	ldrh	r3, [r5, #12]
 8001814:	059a      	lsls	r2, r3, #22
 8001816:	d402      	bmi.n	800181e <_vfiprintf_r+0x32>
 8001818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800181a:	f7ff ff27 	bl	800166c <__retarget_lock_acquire_recursive>
 800181e:	89ab      	ldrh	r3, [r5, #12]
 8001820:	071b      	lsls	r3, r3, #28
 8001822:	d501      	bpl.n	8001828 <_vfiprintf_r+0x3c>
 8001824:	692b      	ldr	r3, [r5, #16]
 8001826:	b9eb      	cbnz	r3, 8001864 <_vfiprintf_r+0x78>
 8001828:	4629      	mov	r1, r5
 800182a:	4630      	mov	r0, r6
 800182c:	f000 fb5a 	bl	8001ee4 <__swsetup_r>
 8001830:	b1c0      	cbz	r0, 8001864 <_vfiprintf_r+0x78>
 8001832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001834:	07dc      	lsls	r4, r3, #31
 8001836:	d50e      	bpl.n	8001856 <_vfiprintf_r+0x6a>
 8001838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800183c:	b01d      	add	sp, #116	; 0x74
 800183e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001842:	4b7b      	ldr	r3, [pc, #492]	; (8001a30 <_vfiprintf_r+0x244>)
 8001844:	429d      	cmp	r5, r3
 8001846:	d101      	bne.n	800184c <_vfiprintf_r+0x60>
 8001848:	68b5      	ldr	r5, [r6, #8]
 800184a:	e7df      	b.n	800180c <_vfiprintf_r+0x20>
 800184c:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <_vfiprintf_r+0x248>)
 800184e:	429d      	cmp	r5, r3
 8001850:	bf08      	it	eq
 8001852:	68f5      	ldreq	r5, [r6, #12]
 8001854:	e7da      	b.n	800180c <_vfiprintf_r+0x20>
 8001856:	89ab      	ldrh	r3, [r5, #12]
 8001858:	0598      	lsls	r0, r3, #22
 800185a:	d4ed      	bmi.n	8001838 <_vfiprintf_r+0x4c>
 800185c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800185e:	f7ff ff06 	bl	800166e <__retarget_lock_release_recursive>
 8001862:	e7e9      	b.n	8001838 <_vfiprintf_r+0x4c>
 8001864:	2300      	movs	r3, #0
 8001866:	9309      	str	r3, [sp, #36]	; 0x24
 8001868:	2320      	movs	r3, #32
 800186a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800186e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001872:	2330      	movs	r3, #48	; 0x30
 8001874:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a38 <_vfiprintf_r+0x24c>
 8001878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800187c:	f04f 0901 	mov.w	r9, #1
 8001880:	4623      	mov	r3, r4
 8001882:	469a      	mov	sl, r3
 8001884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001888:	b10a      	cbz	r2, 800188e <_vfiprintf_r+0xa2>
 800188a:	2a25      	cmp	r2, #37	; 0x25
 800188c:	d1f9      	bne.n	8001882 <_vfiprintf_r+0x96>
 800188e:	ebba 0b04 	subs.w	fp, sl, r4
 8001892:	d00b      	beq.n	80018ac <_vfiprintf_r+0xc0>
 8001894:	465b      	mov	r3, fp
 8001896:	4622      	mov	r2, r4
 8001898:	4629      	mov	r1, r5
 800189a:	4630      	mov	r0, r6
 800189c:	f7ff ff93 	bl	80017c6 <__sfputs_r>
 80018a0:	3001      	adds	r0, #1
 80018a2:	f000 80aa 	beq.w	80019fa <_vfiprintf_r+0x20e>
 80018a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018a8:	445a      	add	r2, fp
 80018aa:	9209      	str	r2, [sp, #36]	; 0x24
 80018ac:	f89a 3000 	ldrb.w	r3, [sl]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a2 	beq.w	80019fa <_vfiprintf_r+0x20e>
 80018b6:	2300      	movs	r3, #0
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018c0:	f10a 0a01 	add.w	sl, sl, #1
 80018c4:	9304      	str	r3, [sp, #16]
 80018c6:	9307      	str	r3, [sp, #28]
 80018c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018cc:	931a      	str	r3, [sp, #104]	; 0x68
 80018ce:	4654      	mov	r4, sl
 80018d0:	2205      	movs	r2, #5
 80018d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018d6:	4858      	ldr	r0, [pc, #352]	; (8001a38 <_vfiprintf_r+0x24c>)
 80018d8:	f7fe fc8a 	bl	80001f0 <memchr>
 80018dc:	9a04      	ldr	r2, [sp, #16]
 80018de:	b9d8      	cbnz	r0, 8001918 <_vfiprintf_r+0x12c>
 80018e0:	06d1      	lsls	r1, r2, #27
 80018e2:	bf44      	itt	mi
 80018e4:	2320      	movmi	r3, #32
 80018e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018ea:	0713      	lsls	r3, r2, #28
 80018ec:	bf44      	itt	mi
 80018ee:	232b      	movmi	r3, #43	; 0x2b
 80018f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018f4:	f89a 3000 	ldrb.w	r3, [sl]
 80018f8:	2b2a      	cmp	r3, #42	; 0x2a
 80018fa:	d015      	beq.n	8001928 <_vfiprintf_r+0x13c>
 80018fc:	9a07      	ldr	r2, [sp, #28]
 80018fe:	4654      	mov	r4, sl
 8001900:	2000      	movs	r0, #0
 8001902:	f04f 0c0a 	mov.w	ip, #10
 8001906:	4621      	mov	r1, r4
 8001908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800190c:	3b30      	subs	r3, #48	; 0x30
 800190e:	2b09      	cmp	r3, #9
 8001910:	d94e      	bls.n	80019b0 <_vfiprintf_r+0x1c4>
 8001912:	b1b0      	cbz	r0, 8001942 <_vfiprintf_r+0x156>
 8001914:	9207      	str	r2, [sp, #28]
 8001916:	e014      	b.n	8001942 <_vfiprintf_r+0x156>
 8001918:	eba0 0308 	sub.w	r3, r0, r8
 800191c:	fa09 f303 	lsl.w	r3, r9, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	9304      	str	r3, [sp, #16]
 8001924:	46a2      	mov	sl, r4
 8001926:	e7d2      	b.n	80018ce <_vfiprintf_r+0xe2>
 8001928:	9b03      	ldr	r3, [sp, #12]
 800192a:	1d19      	adds	r1, r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	9103      	str	r1, [sp, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	bfbb      	ittet	lt
 8001934:	425b      	neglt	r3, r3
 8001936:	f042 0202 	orrlt.w	r2, r2, #2
 800193a:	9307      	strge	r3, [sp, #28]
 800193c:	9307      	strlt	r3, [sp, #28]
 800193e:	bfb8      	it	lt
 8001940:	9204      	strlt	r2, [sp, #16]
 8001942:	7823      	ldrb	r3, [r4, #0]
 8001944:	2b2e      	cmp	r3, #46	; 0x2e
 8001946:	d10c      	bne.n	8001962 <_vfiprintf_r+0x176>
 8001948:	7863      	ldrb	r3, [r4, #1]
 800194a:	2b2a      	cmp	r3, #42	; 0x2a
 800194c:	d135      	bne.n	80019ba <_vfiprintf_r+0x1ce>
 800194e:	9b03      	ldr	r3, [sp, #12]
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	9203      	str	r2, [sp, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800195e:	3402      	adds	r4, #2
 8001960:	9305      	str	r3, [sp, #20]
 8001962:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001a48 <_vfiprintf_r+0x25c>
 8001966:	7821      	ldrb	r1, [r4, #0]
 8001968:	2203      	movs	r2, #3
 800196a:	4650      	mov	r0, sl
 800196c:	f7fe fc40 	bl	80001f0 <memchr>
 8001970:	b140      	cbz	r0, 8001984 <_vfiprintf_r+0x198>
 8001972:	2340      	movs	r3, #64	; 0x40
 8001974:	eba0 000a 	sub.w	r0, r0, sl
 8001978:	fa03 f000 	lsl.w	r0, r3, r0
 800197c:	9b04      	ldr	r3, [sp, #16]
 800197e:	4303      	orrs	r3, r0
 8001980:	3401      	adds	r4, #1
 8001982:	9304      	str	r3, [sp, #16]
 8001984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001988:	482c      	ldr	r0, [pc, #176]	; (8001a3c <_vfiprintf_r+0x250>)
 800198a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800198e:	2206      	movs	r2, #6
 8001990:	f7fe fc2e 	bl	80001f0 <memchr>
 8001994:	2800      	cmp	r0, #0
 8001996:	d03f      	beq.n	8001a18 <_vfiprintf_r+0x22c>
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <_vfiprintf_r+0x254>)
 800199a:	bb1b      	cbnz	r3, 80019e4 <_vfiprintf_r+0x1f8>
 800199c:	9b03      	ldr	r3, [sp, #12]
 800199e:	3307      	adds	r3, #7
 80019a0:	f023 0307 	bic.w	r3, r3, #7
 80019a4:	3308      	adds	r3, #8
 80019a6:	9303      	str	r3, [sp, #12]
 80019a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019aa:	443b      	add	r3, r7
 80019ac:	9309      	str	r3, [sp, #36]	; 0x24
 80019ae:	e767      	b.n	8001880 <_vfiprintf_r+0x94>
 80019b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80019b4:	460c      	mov	r4, r1
 80019b6:	2001      	movs	r0, #1
 80019b8:	e7a5      	b.n	8001906 <_vfiprintf_r+0x11a>
 80019ba:	2300      	movs	r3, #0
 80019bc:	3401      	adds	r4, #1
 80019be:	9305      	str	r3, [sp, #20]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 0c0a 	mov.w	ip, #10
 80019c6:	4620      	mov	r0, r4
 80019c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019cc:	3a30      	subs	r2, #48	; 0x30
 80019ce:	2a09      	cmp	r2, #9
 80019d0:	d903      	bls.n	80019da <_vfiprintf_r+0x1ee>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0c5      	beq.n	8001962 <_vfiprintf_r+0x176>
 80019d6:	9105      	str	r1, [sp, #20]
 80019d8:	e7c3      	b.n	8001962 <_vfiprintf_r+0x176>
 80019da:	fb0c 2101 	mla	r1, ip, r1, r2
 80019de:	4604      	mov	r4, r0
 80019e0:	2301      	movs	r3, #1
 80019e2:	e7f0      	b.n	80019c6 <_vfiprintf_r+0x1da>
 80019e4:	ab03      	add	r3, sp, #12
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	462a      	mov	r2, r5
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <_vfiprintf_r+0x258>)
 80019ec:	a904      	add	r1, sp, #16
 80019ee:	4630      	mov	r0, r6
 80019f0:	f3af 8000 	nop.w
 80019f4:	4607      	mov	r7, r0
 80019f6:	1c78      	adds	r0, r7, #1
 80019f8:	d1d6      	bne.n	80019a8 <_vfiprintf_r+0x1bc>
 80019fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019fc:	07d9      	lsls	r1, r3, #31
 80019fe:	d405      	bmi.n	8001a0c <_vfiprintf_r+0x220>
 8001a00:	89ab      	ldrh	r3, [r5, #12]
 8001a02:	059a      	lsls	r2, r3, #22
 8001a04:	d402      	bmi.n	8001a0c <_vfiprintf_r+0x220>
 8001a06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a08:	f7ff fe31 	bl	800166e <__retarget_lock_release_recursive>
 8001a0c:	89ab      	ldrh	r3, [r5, #12]
 8001a0e:	065b      	lsls	r3, r3, #25
 8001a10:	f53f af12 	bmi.w	8001838 <_vfiprintf_r+0x4c>
 8001a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a16:	e711      	b.n	800183c <_vfiprintf_r+0x50>
 8001a18:	ab03      	add	r3, sp, #12
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	462a      	mov	r2, r5
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <_vfiprintf_r+0x258>)
 8001a20:	a904      	add	r1, sp, #16
 8001a22:	4630      	mov	r0, r6
 8001a24:	f000 f880 	bl	8001b28 <_printf_i>
 8001a28:	e7e4      	b.n	80019f4 <_vfiprintf_r+0x208>
 8001a2a:	bf00      	nop
 8001a2c:	0800243c 	.word	0x0800243c
 8001a30:	0800245c 	.word	0x0800245c
 8001a34:	0800241c 	.word	0x0800241c
 8001a38:	0800247c 	.word	0x0800247c
 8001a3c:	08002486 	.word	0x08002486
 8001a40:	00000000 	.word	0x00000000
 8001a44:	080017c7 	.word	0x080017c7
 8001a48:	08002482 	.word	0x08002482

08001a4c <_printf_common>:
 8001a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a50:	4616      	mov	r6, r2
 8001a52:	4699      	mov	r9, r3
 8001a54:	688a      	ldr	r2, [r1, #8]
 8001a56:	690b      	ldr	r3, [r1, #16]
 8001a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bfb8      	it	lt
 8001a60:	4613      	movlt	r3, r2
 8001a62:	6033      	str	r3, [r6, #0]
 8001a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a68:	4607      	mov	r7, r0
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	b10a      	cbz	r2, 8001a72 <_printf_common+0x26>
 8001a6e:	3301      	adds	r3, #1
 8001a70:	6033      	str	r3, [r6, #0]
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	0699      	lsls	r1, r3, #26
 8001a76:	bf42      	ittt	mi
 8001a78:	6833      	ldrmi	r3, [r6, #0]
 8001a7a:	3302      	addmi	r3, #2
 8001a7c:	6033      	strmi	r3, [r6, #0]
 8001a7e:	6825      	ldr	r5, [r4, #0]
 8001a80:	f015 0506 	ands.w	r5, r5, #6
 8001a84:	d106      	bne.n	8001a94 <_printf_common+0x48>
 8001a86:	f104 0a19 	add.w	sl, r4, #25
 8001a8a:	68e3      	ldr	r3, [r4, #12]
 8001a8c:	6832      	ldr	r2, [r6, #0]
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	42ab      	cmp	r3, r5
 8001a92:	dc26      	bgt.n	8001ae2 <_printf_common+0x96>
 8001a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a98:	1e13      	subs	r3, r2, #0
 8001a9a:	6822      	ldr	r2, [r4, #0]
 8001a9c:	bf18      	it	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	0692      	lsls	r2, r2, #26
 8001aa2:	d42b      	bmi.n	8001afc <_printf_common+0xb0>
 8001aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	4638      	mov	r0, r7
 8001aac:	47c0      	blx	r8
 8001aae:	3001      	adds	r0, #1
 8001ab0:	d01e      	beq.n	8001af0 <_printf_common+0xa4>
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	68e5      	ldr	r5, [r4, #12]
 8001ab6:	6832      	ldr	r2, [r6, #0]
 8001ab8:	f003 0306 	and.w	r3, r3, #6
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	bf08      	it	eq
 8001ac0:	1aad      	subeq	r5, r5, r2
 8001ac2:	68a3      	ldr	r3, [r4, #8]
 8001ac4:	6922      	ldr	r2, [r4, #16]
 8001ac6:	bf0c      	ite	eq
 8001ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001acc:	2500      	movne	r5, #0
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	bfc4      	itt	gt
 8001ad2:	1a9b      	subgt	r3, r3, r2
 8001ad4:	18ed      	addgt	r5, r5, r3
 8001ad6:	2600      	movs	r6, #0
 8001ad8:	341a      	adds	r4, #26
 8001ada:	42b5      	cmp	r5, r6
 8001adc:	d11a      	bne.n	8001b14 <_printf_common+0xc8>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e008      	b.n	8001af4 <_printf_common+0xa8>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	4638      	mov	r0, r7
 8001aea:	47c0      	blx	r8
 8001aec:	3001      	adds	r0, #1
 8001aee:	d103      	bne.n	8001af8 <_printf_common+0xac>
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af8:	3501      	adds	r5, #1
 8001afa:	e7c6      	b.n	8001a8a <_printf_common+0x3e>
 8001afc:	18e1      	adds	r1, r4, r3
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	2030      	movs	r0, #48	; 0x30
 8001b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b06:	4422      	add	r2, r4
 8001b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b10:	3302      	adds	r3, #2
 8001b12:	e7c7      	b.n	8001aa4 <_printf_common+0x58>
 8001b14:	2301      	movs	r3, #1
 8001b16:	4622      	mov	r2, r4
 8001b18:	4649      	mov	r1, r9
 8001b1a:	4638      	mov	r0, r7
 8001b1c:	47c0      	blx	r8
 8001b1e:	3001      	adds	r0, #1
 8001b20:	d0e6      	beq.n	8001af0 <_printf_common+0xa4>
 8001b22:	3601      	adds	r6, #1
 8001b24:	e7d9      	b.n	8001ada <_printf_common+0x8e>
	...

08001b28 <_printf_i>:
 8001b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b2c:	7e0f      	ldrb	r7, [r1, #24]
 8001b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b30:	2f78      	cmp	r7, #120	; 0x78
 8001b32:	4691      	mov	r9, r2
 8001b34:	4680      	mov	r8, r0
 8001b36:	460c      	mov	r4, r1
 8001b38:	469a      	mov	sl, r3
 8001b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b3e:	d807      	bhi.n	8001b50 <_printf_i+0x28>
 8001b40:	2f62      	cmp	r7, #98	; 0x62
 8001b42:	d80a      	bhi.n	8001b5a <_printf_i+0x32>
 8001b44:	2f00      	cmp	r7, #0
 8001b46:	f000 80d8 	beq.w	8001cfa <_printf_i+0x1d2>
 8001b4a:	2f58      	cmp	r7, #88	; 0x58
 8001b4c:	f000 80a3 	beq.w	8001c96 <_printf_i+0x16e>
 8001b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b58:	e03a      	b.n	8001bd0 <_printf_i+0xa8>
 8001b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b5e:	2b15      	cmp	r3, #21
 8001b60:	d8f6      	bhi.n	8001b50 <_printf_i+0x28>
 8001b62:	a101      	add	r1, pc, #4	; (adr r1, 8001b68 <_printf_i+0x40>)
 8001b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b68:	08001bc1 	.word	0x08001bc1
 8001b6c:	08001bd5 	.word	0x08001bd5
 8001b70:	08001b51 	.word	0x08001b51
 8001b74:	08001b51 	.word	0x08001b51
 8001b78:	08001b51 	.word	0x08001b51
 8001b7c:	08001b51 	.word	0x08001b51
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001b51 	.word	0x08001b51
 8001b88:	08001b51 	.word	0x08001b51
 8001b8c:	08001b51 	.word	0x08001b51
 8001b90:	08001b51 	.word	0x08001b51
 8001b94:	08001ce1 	.word	0x08001ce1
 8001b98:	08001c05 	.word	0x08001c05
 8001b9c:	08001cc3 	.word	0x08001cc3
 8001ba0:	08001b51 	.word	0x08001b51
 8001ba4:	08001b51 	.word	0x08001b51
 8001ba8:	08001d03 	.word	0x08001d03
 8001bac:	08001b51 	.word	0x08001b51
 8001bb0:	08001c05 	.word	0x08001c05
 8001bb4:	08001b51 	.word	0x08001b51
 8001bb8:	08001b51 	.word	0x08001b51
 8001bbc:	08001ccb 	.word	0x08001ccb
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	1d1a      	adds	r2, r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	602a      	str	r2, [r5, #0]
 8001bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0a3      	b.n	8001d1c <_printf_i+0x1f4>
 8001bd4:	6820      	ldr	r0, [r4, #0]
 8001bd6:	6829      	ldr	r1, [r5, #0]
 8001bd8:	0606      	lsls	r6, r0, #24
 8001bda:	f101 0304 	add.w	r3, r1, #4
 8001bde:	d50a      	bpl.n	8001bf6 <_printf_i+0xce>
 8001be0:	680e      	ldr	r6, [r1, #0]
 8001be2:	602b      	str	r3, [r5, #0]
 8001be4:	2e00      	cmp	r6, #0
 8001be6:	da03      	bge.n	8001bf0 <_printf_i+0xc8>
 8001be8:	232d      	movs	r3, #45	; 0x2d
 8001bea:	4276      	negs	r6, r6
 8001bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bf0:	485e      	ldr	r0, [pc, #376]	; (8001d6c <_printf_i+0x244>)
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	e019      	b.n	8001c2a <_printf_i+0x102>
 8001bf6:	680e      	ldr	r6, [r1, #0]
 8001bf8:	602b      	str	r3, [r5, #0]
 8001bfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001bfe:	bf18      	it	ne
 8001c00:	b236      	sxthne	r6, r6
 8001c02:	e7ef      	b.n	8001be4 <_printf_i+0xbc>
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	6820      	ldr	r0, [r4, #0]
 8001c08:	1d19      	adds	r1, r3, #4
 8001c0a:	6029      	str	r1, [r5, #0]
 8001c0c:	0601      	lsls	r1, r0, #24
 8001c0e:	d501      	bpl.n	8001c14 <_printf_i+0xec>
 8001c10:	681e      	ldr	r6, [r3, #0]
 8001c12:	e002      	b.n	8001c1a <_printf_i+0xf2>
 8001c14:	0646      	lsls	r6, r0, #25
 8001c16:	d5fb      	bpl.n	8001c10 <_printf_i+0xe8>
 8001c18:	881e      	ldrh	r6, [r3, #0]
 8001c1a:	4854      	ldr	r0, [pc, #336]	; (8001d6c <_printf_i+0x244>)
 8001c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8001c1e:	bf0c      	ite	eq
 8001c20:	2308      	moveq	r3, #8
 8001c22:	230a      	movne	r3, #10
 8001c24:	2100      	movs	r1, #0
 8001c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c2a:	6865      	ldr	r5, [r4, #4]
 8001c2c:	60a5      	str	r5, [r4, #8]
 8001c2e:	2d00      	cmp	r5, #0
 8001c30:	bfa2      	ittt	ge
 8001c32:	6821      	ldrge	r1, [r4, #0]
 8001c34:	f021 0104 	bicge.w	r1, r1, #4
 8001c38:	6021      	strge	r1, [r4, #0]
 8001c3a:	b90e      	cbnz	r6, 8001c40 <_printf_i+0x118>
 8001c3c:	2d00      	cmp	r5, #0
 8001c3e:	d04d      	beq.n	8001cdc <_printf_i+0x1b4>
 8001c40:	4615      	mov	r5, r2
 8001c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c46:	fb03 6711 	mls	r7, r3, r1, r6
 8001c4a:	5dc7      	ldrb	r7, [r0, r7]
 8001c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c50:	4637      	mov	r7, r6
 8001c52:	42bb      	cmp	r3, r7
 8001c54:	460e      	mov	r6, r1
 8001c56:	d9f4      	bls.n	8001c42 <_printf_i+0x11a>
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d10b      	bne.n	8001c74 <_printf_i+0x14c>
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	07de      	lsls	r6, r3, #31
 8001c60:	d508      	bpl.n	8001c74 <_printf_i+0x14c>
 8001c62:	6923      	ldr	r3, [r4, #16]
 8001c64:	6861      	ldr	r1, [r4, #4]
 8001c66:	4299      	cmp	r1, r3
 8001c68:	bfde      	ittt	le
 8001c6a:	2330      	movle	r3, #48	; 0x30
 8001c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001c74:	1b52      	subs	r2, r2, r5
 8001c76:	6122      	str	r2, [r4, #16]
 8001c78:	f8cd a000 	str.w	sl, [sp]
 8001c7c:	464b      	mov	r3, r9
 8001c7e:	aa03      	add	r2, sp, #12
 8001c80:	4621      	mov	r1, r4
 8001c82:	4640      	mov	r0, r8
 8001c84:	f7ff fee2 	bl	8001a4c <_printf_common>
 8001c88:	3001      	adds	r0, #1
 8001c8a:	d14c      	bne.n	8001d26 <_printf_i+0x1fe>
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c90:	b004      	add	sp, #16
 8001c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c96:	4835      	ldr	r0, [pc, #212]	; (8001d6c <_printf_i+0x244>)
 8001c98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001c9c:	6829      	ldr	r1, [r5, #0]
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ca4:	6029      	str	r1, [r5, #0]
 8001ca6:	061d      	lsls	r5, r3, #24
 8001ca8:	d514      	bpl.n	8001cd4 <_printf_i+0x1ac>
 8001caa:	07df      	lsls	r7, r3, #31
 8001cac:	bf44      	itt	mi
 8001cae:	f043 0320 	orrmi.w	r3, r3, #32
 8001cb2:	6023      	strmi	r3, [r4, #0]
 8001cb4:	b91e      	cbnz	r6, 8001cbe <_printf_i+0x196>
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f023 0320 	bic.w	r3, r3, #32
 8001cbc:	6023      	str	r3, [r4, #0]
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	e7b0      	b.n	8001c24 <_printf_i+0xfc>
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	6023      	str	r3, [r4, #0]
 8001cca:	2378      	movs	r3, #120	; 0x78
 8001ccc:	4828      	ldr	r0, [pc, #160]	; (8001d70 <_printf_i+0x248>)
 8001cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cd2:	e7e3      	b.n	8001c9c <_printf_i+0x174>
 8001cd4:	0659      	lsls	r1, r3, #25
 8001cd6:	bf48      	it	mi
 8001cd8:	b2b6      	uxthmi	r6, r6
 8001cda:	e7e6      	b.n	8001caa <_printf_i+0x182>
 8001cdc:	4615      	mov	r5, r2
 8001cde:	e7bb      	b.n	8001c58 <_printf_i+0x130>
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	6826      	ldr	r6, [r4, #0]
 8001ce4:	6961      	ldr	r1, [r4, #20]
 8001ce6:	1d18      	adds	r0, r3, #4
 8001ce8:	6028      	str	r0, [r5, #0]
 8001cea:	0635      	lsls	r5, r6, #24
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	d501      	bpl.n	8001cf4 <_printf_i+0x1cc>
 8001cf0:	6019      	str	r1, [r3, #0]
 8001cf2:	e002      	b.n	8001cfa <_printf_i+0x1d2>
 8001cf4:	0670      	lsls	r0, r6, #25
 8001cf6:	d5fb      	bpl.n	8001cf0 <_printf_i+0x1c8>
 8001cf8:	8019      	strh	r1, [r3, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6123      	str	r3, [r4, #16]
 8001cfe:	4615      	mov	r5, r2
 8001d00:	e7ba      	b.n	8001c78 <_printf_i+0x150>
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	1d1a      	adds	r2, r3, #4
 8001d06:	602a      	str	r2, [r5, #0]
 8001d08:	681d      	ldr	r5, [r3, #0]
 8001d0a:	6862      	ldr	r2, [r4, #4]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f7fe fa6e 	bl	80001f0 <memchr>
 8001d14:	b108      	cbz	r0, 8001d1a <_printf_i+0x1f2>
 8001d16:	1b40      	subs	r0, r0, r5
 8001d18:	6060      	str	r0, [r4, #4]
 8001d1a:	6863      	ldr	r3, [r4, #4]
 8001d1c:	6123      	str	r3, [r4, #16]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d24:	e7a8      	b.n	8001c78 <_printf_i+0x150>
 8001d26:	6923      	ldr	r3, [r4, #16]
 8001d28:	462a      	mov	r2, r5
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	4640      	mov	r0, r8
 8001d2e:	47d0      	blx	sl
 8001d30:	3001      	adds	r0, #1
 8001d32:	d0ab      	beq.n	8001c8c <_printf_i+0x164>
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	079b      	lsls	r3, r3, #30
 8001d38:	d413      	bmi.n	8001d62 <_printf_i+0x23a>
 8001d3a:	68e0      	ldr	r0, [r4, #12]
 8001d3c:	9b03      	ldr	r3, [sp, #12]
 8001d3e:	4298      	cmp	r0, r3
 8001d40:	bfb8      	it	lt
 8001d42:	4618      	movlt	r0, r3
 8001d44:	e7a4      	b.n	8001c90 <_printf_i+0x168>
 8001d46:	2301      	movs	r3, #1
 8001d48:	4632      	mov	r2, r6
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	4640      	mov	r0, r8
 8001d4e:	47d0      	blx	sl
 8001d50:	3001      	adds	r0, #1
 8001d52:	d09b      	beq.n	8001c8c <_printf_i+0x164>
 8001d54:	3501      	adds	r5, #1
 8001d56:	68e3      	ldr	r3, [r4, #12]
 8001d58:	9903      	ldr	r1, [sp, #12]
 8001d5a:	1a5b      	subs	r3, r3, r1
 8001d5c:	42ab      	cmp	r3, r5
 8001d5e:	dcf2      	bgt.n	8001d46 <_printf_i+0x21e>
 8001d60:	e7eb      	b.n	8001d3a <_printf_i+0x212>
 8001d62:	2500      	movs	r5, #0
 8001d64:	f104 0619 	add.w	r6, r4, #25
 8001d68:	e7f5      	b.n	8001d56 <_printf_i+0x22e>
 8001d6a:	bf00      	nop
 8001d6c:	0800248d 	.word	0x0800248d
 8001d70:	0800249e 	.word	0x0800249e

08001d74 <_sbrk_r>:
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4d06      	ldr	r5, [pc, #24]	; (8001d90 <_sbrk_r+0x1c>)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	602b      	str	r3, [r5, #0]
 8001d80:	f7ff fa38 	bl	80011f4 <_sbrk>
 8001d84:	1c43      	adds	r3, r0, #1
 8001d86:	d102      	bne.n	8001d8e <_sbrk_r+0x1a>
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	b103      	cbz	r3, 8001d8e <_sbrk_r+0x1a>
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
 8001d90:	200000f8 	.word	0x200000f8

08001d94 <__sread>:
 8001d94:	b510      	push	{r4, lr}
 8001d96:	460c      	mov	r4, r1
 8001d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d9c:	f000 fab2 	bl	8002304 <_read_r>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	bfab      	itete	ge
 8001da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001da6:	89a3      	ldrhlt	r3, [r4, #12]
 8001da8:	181b      	addge	r3, r3, r0
 8001daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dae:	bfac      	ite	ge
 8001db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001db2:	81a3      	strhlt	r3, [r4, #12]
 8001db4:	bd10      	pop	{r4, pc}

08001db6 <__swrite>:
 8001db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dba:	461f      	mov	r7, r3
 8001dbc:	898b      	ldrh	r3, [r1, #12]
 8001dbe:	05db      	lsls	r3, r3, #23
 8001dc0:	4605      	mov	r5, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	4616      	mov	r6, r2
 8001dc6:	d505      	bpl.n	8001dd4 <__swrite+0x1e>
 8001dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f000 f9c8 	bl	8002164 <_lseek_r>
 8001dd4:	89a3      	ldrh	r3, [r4, #12]
 8001dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dde:	81a3      	strh	r3, [r4, #12]
 8001de0:	4632      	mov	r2, r6
 8001de2:	463b      	mov	r3, r7
 8001de4:	4628      	mov	r0, r5
 8001de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dea:	f000 b869 	b.w	8001ec0 <_write_r>

08001dee <__sseek>:
 8001dee:	b510      	push	{r4, lr}
 8001df0:	460c      	mov	r4, r1
 8001df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df6:	f000 f9b5 	bl	8002164 <_lseek_r>
 8001dfa:	1c43      	adds	r3, r0, #1
 8001dfc:	89a3      	ldrh	r3, [r4, #12]
 8001dfe:	bf15      	itete	ne
 8001e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e0a:	81a3      	strheq	r3, [r4, #12]
 8001e0c:	bf18      	it	ne
 8001e0e:	81a3      	strhne	r3, [r4, #12]
 8001e10:	bd10      	pop	{r4, pc}

08001e12 <__sclose>:
 8001e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e16:	f000 b8d3 	b.w	8001fc0 <_close_r>
	...

08001e1c <__swbuf_r>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	460e      	mov	r6, r1
 8001e20:	4614      	mov	r4, r2
 8001e22:	4605      	mov	r5, r0
 8001e24:	b118      	cbz	r0, 8001e2e <__swbuf_r+0x12>
 8001e26:	6983      	ldr	r3, [r0, #24]
 8001e28:	b90b      	cbnz	r3, 8001e2e <__swbuf_r+0x12>
 8001e2a:	f7ff fb81 	bl	8001530 <__sinit>
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <__swbuf_r+0x98>)
 8001e30:	429c      	cmp	r4, r3
 8001e32:	d12b      	bne.n	8001e8c <__swbuf_r+0x70>
 8001e34:	686c      	ldr	r4, [r5, #4]
 8001e36:	69a3      	ldr	r3, [r4, #24]
 8001e38:	60a3      	str	r3, [r4, #8]
 8001e3a:	89a3      	ldrh	r3, [r4, #12]
 8001e3c:	071a      	lsls	r2, r3, #28
 8001e3e:	d52f      	bpl.n	8001ea0 <__swbuf_r+0x84>
 8001e40:	6923      	ldr	r3, [r4, #16]
 8001e42:	b36b      	cbz	r3, 8001ea0 <__swbuf_r+0x84>
 8001e44:	6923      	ldr	r3, [r4, #16]
 8001e46:	6820      	ldr	r0, [r4, #0]
 8001e48:	1ac0      	subs	r0, r0, r3
 8001e4a:	6963      	ldr	r3, [r4, #20]
 8001e4c:	b2f6      	uxtb	r6, r6
 8001e4e:	4283      	cmp	r3, r0
 8001e50:	4637      	mov	r7, r6
 8001e52:	dc04      	bgt.n	8001e5e <__swbuf_r+0x42>
 8001e54:	4621      	mov	r1, r4
 8001e56:	4628      	mov	r0, r5
 8001e58:	f000 f948 	bl	80020ec <_fflush_r>
 8001e5c:	bb30      	cbnz	r0, 8001eac <__swbuf_r+0x90>
 8001e5e:	68a3      	ldr	r3, [r4, #8]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60a3      	str	r3, [r4, #8]
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	6022      	str	r2, [r4, #0]
 8001e6a:	701e      	strb	r6, [r3, #0]
 8001e6c:	6963      	ldr	r3, [r4, #20]
 8001e6e:	3001      	adds	r0, #1
 8001e70:	4283      	cmp	r3, r0
 8001e72:	d004      	beq.n	8001e7e <__swbuf_r+0x62>
 8001e74:	89a3      	ldrh	r3, [r4, #12]
 8001e76:	07db      	lsls	r3, r3, #31
 8001e78:	d506      	bpl.n	8001e88 <__swbuf_r+0x6c>
 8001e7a:	2e0a      	cmp	r6, #10
 8001e7c:	d104      	bne.n	8001e88 <__swbuf_r+0x6c>
 8001e7e:	4621      	mov	r1, r4
 8001e80:	4628      	mov	r0, r5
 8001e82:	f000 f933 	bl	80020ec <_fflush_r>
 8001e86:	b988      	cbnz	r0, 8001eac <__swbuf_r+0x90>
 8001e88:	4638      	mov	r0, r7
 8001e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <__swbuf_r+0x9c>)
 8001e8e:	429c      	cmp	r4, r3
 8001e90:	d101      	bne.n	8001e96 <__swbuf_r+0x7a>
 8001e92:	68ac      	ldr	r4, [r5, #8]
 8001e94:	e7cf      	b.n	8001e36 <__swbuf_r+0x1a>
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <__swbuf_r+0xa0>)
 8001e98:	429c      	cmp	r4, r3
 8001e9a:	bf08      	it	eq
 8001e9c:	68ec      	ldreq	r4, [r5, #12]
 8001e9e:	e7ca      	b.n	8001e36 <__swbuf_r+0x1a>
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	f000 f81e 	bl	8001ee4 <__swsetup_r>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d0cb      	beq.n	8001e44 <__swbuf_r+0x28>
 8001eac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001eb0:	e7ea      	b.n	8001e88 <__swbuf_r+0x6c>
 8001eb2:	bf00      	nop
 8001eb4:	0800243c 	.word	0x0800243c
 8001eb8:	0800245c 	.word	0x0800245c
 8001ebc:	0800241c 	.word	0x0800241c

08001ec0 <_write_r>:
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4d07      	ldr	r5, [pc, #28]	; (8001ee0 <_write_r+0x20>)
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	602a      	str	r2, [r5, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f7ff f981 	bl	80011d6 <_write>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	d102      	bne.n	8001ede <_write_r+0x1e>
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	b103      	cbz	r3, 8001ede <_write_r+0x1e>
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	200000f8 	.word	0x200000f8

08001ee4 <__swsetup_r>:
 8001ee4:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <__swsetup_r+0xcc>)
 8001ee6:	b570      	push	{r4, r5, r6, lr}
 8001ee8:	681d      	ldr	r5, [r3, #0]
 8001eea:	4606      	mov	r6, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	b125      	cbz	r5, 8001efa <__swsetup_r+0x16>
 8001ef0:	69ab      	ldr	r3, [r5, #24]
 8001ef2:	b913      	cbnz	r3, 8001efa <__swsetup_r+0x16>
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f7ff fb1b 	bl	8001530 <__sinit>
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <__swsetup_r+0xd0>)
 8001efc:	429c      	cmp	r4, r3
 8001efe:	d10f      	bne.n	8001f20 <__swsetup_r+0x3c>
 8001f00:	686c      	ldr	r4, [r5, #4]
 8001f02:	89a3      	ldrh	r3, [r4, #12]
 8001f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f08:	0719      	lsls	r1, r3, #28
 8001f0a:	d42c      	bmi.n	8001f66 <__swsetup_r+0x82>
 8001f0c:	06dd      	lsls	r5, r3, #27
 8001f0e:	d411      	bmi.n	8001f34 <__swsetup_r+0x50>
 8001f10:	2309      	movs	r3, #9
 8001f12:	6033      	str	r3, [r6, #0]
 8001f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f18:	81a3      	strh	r3, [r4, #12]
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1e:	e03e      	b.n	8001f9e <__swsetup_r+0xba>
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <__swsetup_r+0xd4>)
 8001f22:	429c      	cmp	r4, r3
 8001f24:	d101      	bne.n	8001f2a <__swsetup_r+0x46>
 8001f26:	68ac      	ldr	r4, [r5, #8]
 8001f28:	e7eb      	b.n	8001f02 <__swsetup_r+0x1e>
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <__swsetup_r+0xd8>)
 8001f2c:	429c      	cmp	r4, r3
 8001f2e:	bf08      	it	eq
 8001f30:	68ec      	ldreq	r4, [r5, #12]
 8001f32:	e7e6      	b.n	8001f02 <__swsetup_r+0x1e>
 8001f34:	0758      	lsls	r0, r3, #29
 8001f36:	d512      	bpl.n	8001f5e <__swsetup_r+0x7a>
 8001f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f3a:	b141      	cbz	r1, 8001f4e <__swsetup_r+0x6a>
 8001f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f40:	4299      	cmp	r1, r3
 8001f42:	d002      	beq.n	8001f4a <__swsetup_r+0x66>
 8001f44:	4630      	mov	r0, r6
 8001f46:	f000 f991 	bl	800226c <_free_r>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8001f4e:	89a3      	ldrh	r3, [r4, #12]
 8001f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f54:	81a3      	strh	r3, [r4, #12]
 8001f56:	2300      	movs	r3, #0
 8001f58:	6063      	str	r3, [r4, #4]
 8001f5a:	6923      	ldr	r3, [r4, #16]
 8001f5c:	6023      	str	r3, [r4, #0]
 8001f5e:	89a3      	ldrh	r3, [r4, #12]
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	81a3      	strh	r3, [r4, #12]
 8001f66:	6923      	ldr	r3, [r4, #16]
 8001f68:	b94b      	cbnz	r3, 8001f7e <__swsetup_r+0x9a>
 8001f6a:	89a3      	ldrh	r3, [r4, #12]
 8001f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f74:	d003      	beq.n	8001f7e <__swsetup_r+0x9a>
 8001f76:	4621      	mov	r1, r4
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f000 f92b 	bl	80021d4 <__smakebuf_r>
 8001f7e:	89a0      	ldrh	r0, [r4, #12]
 8001f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f84:	f010 0301 	ands.w	r3, r0, #1
 8001f88:	d00a      	beq.n	8001fa0 <__swsetup_r+0xbc>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60a3      	str	r3, [r4, #8]
 8001f8e:	6963      	ldr	r3, [r4, #20]
 8001f90:	425b      	negs	r3, r3
 8001f92:	61a3      	str	r3, [r4, #24]
 8001f94:	6923      	ldr	r3, [r4, #16]
 8001f96:	b943      	cbnz	r3, 8001faa <__swsetup_r+0xc6>
 8001f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f9c:	d1ba      	bne.n	8001f14 <__swsetup_r+0x30>
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
 8001fa0:	0781      	lsls	r1, r0, #30
 8001fa2:	bf58      	it	pl
 8001fa4:	6963      	ldrpl	r3, [r4, #20]
 8001fa6:	60a3      	str	r3, [r4, #8]
 8001fa8:	e7f4      	b.n	8001f94 <__swsetup_r+0xb0>
 8001faa:	2000      	movs	r0, #0
 8001fac:	e7f7      	b.n	8001f9e <__swsetup_r+0xba>
 8001fae:	bf00      	nop
 8001fb0:	2000001c 	.word	0x2000001c
 8001fb4:	0800243c 	.word	0x0800243c
 8001fb8:	0800245c 	.word	0x0800245c
 8001fbc:	0800241c 	.word	0x0800241c

08001fc0 <_close_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4d06      	ldr	r5, [pc, #24]	; (8001fdc <_close_r+0x1c>)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	4608      	mov	r0, r1
 8001fca:	602b      	str	r3, [r5, #0]
 8001fcc:	f7ff f92c 	bl	8001228 <_close>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d102      	bne.n	8001fda <_close_r+0x1a>
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	b103      	cbz	r3, 8001fda <_close_r+0x1a>
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	200000f8 	.word	0x200000f8

08001fe0 <__sflush_r>:
 8001fe0:	898a      	ldrh	r2, [r1, #12]
 8001fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	0710      	lsls	r0, r2, #28
 8001fea:	460c      	mov	r4, r1
 8001fec:	d458      	bmi.n	80020a0 <__sflush_r+0xc0>
 8001fee:	684b      	ldr	r3, [r1, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	dc05      	bgt.n	8002000 <__sflush_r+0x20>
 8001ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	dc02      	bgt.n	8002000 <__sflush_r+0x20>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002002:	2e00      	cmp	r6, #0
 8002004:	d0f9      	beq.n	8001ffa <__sflush_r+0x1a>
 8002006:	2300      	movs	r3, #0
 8002008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800200c:	682f      	ldr	r7, [r5, #0]
 800200e:	602b      	str	r3, [r5, #0]
 8002010:	d032      	beq.n	8002078 <__sflush_r+0x98>
 8002012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	075a      	lsls	r2, r3, #29
 8002018:	d505      	bpl.n	8002026 <__sflush_r+0x46>
 800201a:	6863      	ldr	r3, [r4, #4]
 800201c:	1ac0      	subs	r0, r0, r3
 800201e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002020:	b10b      	cbz	r3, 8002026 <__sflush_r+0x46>
 8002022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002024:	1ac0      	subs	r0, r0, r3
 8002026:	2300      	movs	r3, #0
 8002028:	4602      	mov	r2, r0
 800202a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800202c:	6a21      	ldr	r1, [r4, #32]
 800202e:	4628      	mov	r0, r5
 8002030:	47b0      	blx	r6
 8002032:	1c43      	adds	r3, r0, #1
 8002034:	89a3      	ldrh	r3, [r4, #12]
 8002036:	d106      	bne.n	8002046 <__sflush_r+0x66>
 8002038:	6829      	ldr	r1, [r5, #0]
 800203a:	291d      	cmp	r1, #29
 800203c:	d82c      	bhi.n	8002098 <__sflush_r+0xb8>
 800203e:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <__sflush_r+0x108>)
 8002040:	40ca      	lsrs	r2, r1
 8002042:	07d6      	lsls	r6, r2, #31
 8002044:	d528      	bpl.n	8002098 <__sflush_r+0xb8>
 8002046:	2200      	movs	r2, #0
 8002048:	6062      	str	r2, [r4, #4]
 800204a:	04d9      	lsls	r1, r3, #19
 800204c:	6922      	ldr	r2, [r4, #16]
 800204e:	6022      	str	r2, [r4, #0]
 8002050:	d504      	bpl.n	800205c <__sflush_r+0x7c>
 8002052:	1c42      	adds	r2, r0, #1
 8002054:	d101      	bne.n	800205a <__sflush_r+0x7a>
 8002056:	682b      	ldr	r3, [r5, #0]
 8002058:	b903      	cbnz	r3, 800205c <__sflush_r+0x7c>
 800205a:	6560      	str	r0, [r4, #84]	; 0x54
 800205c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800205e:	602f      	str	r7, [r5, #0]
 8002060:	2900      	cmp	r1, #0
 8002062:	d0ca      	beq.n	8001ffa <__sflush_r+0x1a>
 8002064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002068:	4299      	cmp	r1, r3
 800206a:	d002      	beq.n	8002072 <__sflush_r+0x92>
 800206c:	4628      	mov	r0, r5
 800206e:	f000 f8fd 	bl	800226c <_free_r>
 8002072:	2000      	movs	r0, #0
 8002074:	6360      	str	r0, [r4, #52]	; 0x34
 8002076:	e7c1      	b.n	8001ffc <__sflush_r+0x1c>
 8002078:	6a21      	ldr	r1, [r4, #32]
 800207a:	2301      	movs	r3, #1
 800207c:	4628      	mov	r0, r5
 800207e:	47b0      	blx	r6
 8002080:	1c41      	adds	r1, r0, #1
 8002082:	d1c7      	bne.n	8002014 <__sflush_r+0x34>
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0c4      	beq.n	8002014 <__sflush_r+0x34>
 800208a:	2b1d      	cmp	r3, #29
 800208c:	d001      	beq.n	8002092 <__sflush_r+0xb2>
 800208e:	2b16      	cmp	r3, #22
 8002090:	d101      	bne.n	8002096 <__sflush_r+0xb6>
 8002092:	602f      	str	r7, [r5, #0]
 8002094:	e7b1      	b.n	8001ffa <__sflush_r+0x1a>
 8002096:	89a3      	ldrh	r3, [r4, #12]
 8002098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209c:	81a3      	strh	r3, [r4, #12]
 800209e:	e7ad      	b.n	8001ffc <__sflush_r+0x1c>
 80020a0:	690f      	ldr	r7, [r1, #16]
 80020a2:	2f00      	cmp	r7, #0
 80020a4:	d0a9      	beq.n	8001ffa <__sflush_r+0x1a>
 80020a6:	0793      	lsls	r3, r2, #30
 80020a8:	680e      	ldr	r6, [r1, #0]
 80020aa:	bf08      	it	eq
 80020ac:	694b      	ldreq	r3, [r1, #20]
 80020ae:	600f      	str	r7, [r1, #0]
 80020b0:	bf18      	it	ne
 80020b2:	2300      	movne	r3, #0
 80020b4:	eba6 0807 	sub.w	r8, r6, r7
 80020b8:	608b      	str	r3, [r1, #8]
 80020ba:	f1b8 0f00 	cmp.w	r8, #0
 80020be:	dd9c      	ble.n	8001ffa <__sflush_r+0x1a>
 80020c0:	6a21      	ldr	r1, [r4, #32]
 80020c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020c4:	4643      	mov	r3, r8
 80020c6:	463a      	mov	r2, r7
 80020c8:	4628      	mov	r0, r5
 80020ca:	47b0      	blx	r6
 80020cc:	2800      	cmp	r0, #0
 80020ce:	dc06      	bgt.n	80020de <__sflush_r+0xfe>
 80020d0:	89a3      	ldrh	r3, [r4, #12]
 80020d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d6:	81a3      	strh	r3, [r4, #12]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020dc:	e78e      	b.n	8001ffc <__sflush_r+0x1c>
 80020de:	4407      	add	r7, r0
 80020e0:	eba8 0800 	sub.w	r8, r8, r0
 80020e4:	e7e9      	b.n	80020ba <__sflush_r+0xda>
 80020e6:	bf00      	nop
 80020e8:	20400001 	.word	0x20400001

080020ec <_fflush_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	690b      	ldr	r3, [r1, #16]
 80020f0:	4605      	mov	r5, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	b913      	cbnz	r3, 80020fc <_fflush_r+0x10>
 80020f6:	2500      	movs	r5, #0
 80020f8:	4628      	mov	r0, r5
 80020fa:	bd38      	pop	{r3, r4, r5, pc}
 80020fc:	b118      	cbz	r0, 8002106 <_fflush_r+0x1a>
 80020fe:	6983      	ldr	r3, [r0, #24]
 8002100:	b90b      	cbnz	r3, 8002106 <_fflush_r+0x1a>
 8002102:	f7ff fa15 	bl	8001530 <__sinit>
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <_fflush_r+0x6c>)
 8002108:	429c      	cmp	r4, r3
 800210a:	d11b      	bne.n	8002144 <_fflush_r+0x58>
 800210c:	686c      	ldr	r4, [r5, #4]
 800210e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0ef      	beq.n	80020f6 <_fflush_r+0xa>
 8002116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002118:	07d0      	lsls	r0, r2, #31
 800211a:	d404      	bmi.n	8002126 <_fflush_r+0x3a>
 800211c:	0599      	lsls	r1, r3, #22
 800211e:	d402      	bmi.n	8002126 <_fflush_r+0x3a>
 8002120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002122:	f7ff faa3 	bl	800166c <__retarget_lock_acquire_recursive>
 8002126:	4628      	mov	r0, r5
 8002128:	4621      	mov	r1, r4
 800212a:	f7ff ff59 	bl	8001fe0 <__sflush_r>
 800212e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002130:	07da      	lsls	r2, r3, #31
 8002132:	4605      	mov	r5, r0
 8002134:	d4e0      	bmi.n	80020f8 <_fflush_r+0xc>
 8002136:	89a3      	ldrh	r3, [r4, #12]
 8002138:	059b      	lsls	r3, r3, #22
 800213a:	d4dd      	bmi.n	80020f8 <_fflush_r+0xc>
 800213c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800213e:	f7ff fa96 	bl	800166e <__retarget_lock_release_recursive>
 8002142:	e7d9      	b.n	80020f8 <_fflush_r+0xc>
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <_fflush_r+0x70>)
 8002146:	429c      	cmp	r4, r3
 8002148:	d101      	bne.n	800214e <_fflush_r+0x62>
 800214a:	68ac      	ldr	r4, [r5, #8]
 800214c:	e7df      	b.n	800210e <_fflush_r+0x22>
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <_fflush_r+0x74>)
 8002150:	429c      	cmp	r4, r3
 8002152:	bf08      	it	eq
 8002154:	68ec      	ldreq	r4, [r5, #12]
 8002156:	e7da      	b.n	800210e <_fflush_r+0x22>
 8002158:	0800243c 	.word	0x0800243c
 800215c:	0800245c 	.word	0x0800245c
 8002160:	0800241c 	.word	0x0800241c

08002164 <_lseek_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4d07      	ldr	r5, [pc, #28]	; (8002184 <_lseek_r+0x20>)
 8002168:	4604      	mov	r4, r0
 800216a:	4608      	mov	r0, r1
 800216c:	4611      	mov	r1, r2
 800216e:	2200      	movs	r2, #0
 8002170:	602a      	str	r2, [r5, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	f7ff f862 	bl	800123c <_lseek>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d102      	bne.n	8002182 <_lseek_r+0x1e>
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	b103      	cbz	r3, 8002182 <_lseek_r+0x1e>
 8002180:	6023      	str	r3, [r4, #0]
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	200000f8 	.word	0x200000f8

08002188 <__swhatbuf_r>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	460e      	mov	r6, r1
 800218c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002190:	2900      	cmp	r1, #0
 8002192:	b096      	sub	sp, #88	; 0x58
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
 8002198:	da08      	bge.n	80021ac <__swhatbuf_r+0x24>
 800219a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	602a      	str	r2, [r5, #0]
 80021a2:	061a      	lsls	r2, r3, #24
 80021a4:	d410      	bmi.n	80021c8 <__swhatbuf_r+0x40>
 80021a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021aa:	e00e      	b.n	80021ca <__swhatbuf_r+0x42>
 80021ac:	466a      	mov	r2, sp
 80021ae:	f000 f8bb 	bl	8002328 <_fstat_r>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	dbf1      	blt.n	800219a <__swhatbuf_r+0x12>
 80021b6:	9a01      	ldr	r2, [sp, #4]
 80021b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80021bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80021c0:	425a      	negs	r2, r3
 80021c2:	415a      	adcs	r2, r3
 80021c4:	602a      	str	r2, [r5, #0]
 80021c6:	e7ee      	b.n	80021a6 <__swhatbuf_r+0x1e>
 80021c8:	2340      	movs	r3, #64	; 0x40
 80021ca:	2000      	movs	r0, #0
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	b016      	add	sp, #88	; 0x58
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080021d4 <__smakebuf_r>:
 80021d4:	898b      	ldrh	r3, [r1, #12]
 80021d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021d8:	079d      	lsls	r5, r3, #30
 80021da:	4606      	mov	r6, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	d507      	bpl.n	80021f0 <__smakebuf_r+0x1c>
 80021e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021e4:	6023      	str	r3, [r4, #0]
 80021e6:	6123      	str	r3, [r4, #16]
 80021e8:	2301      	movs	r3, #1
 80021ea:	6163      	str	r3, [r4, #20]
 80021ec:	b002      	add	sp, #8
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
 80021f0:	ab01      	add	r3, sp, #4
 80021f2:	466a      	mov	r2, sp
 80021f4:	f7ff ffc8 	bl	8002188 <__swhatbuf_r>
 80021f8:	9900      	ldr	r1, [sp, #0]
 80021fa:	4605      	mov	r5, r0
 80021fc:	4630      	mov	r0, r6
 80021fe:	f7ff fa57 	bl	80016b0 <_malloc_r>
 8002202:	b948      	cbnz	r0, 8002218 <__smakebuf_r+0x44>
 8002204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002208:	059a      	lsls	r2, r3, #22
 800220a:	d4ef      	bmi.n	80021ec <__smakebuf_r+0x18>
 800220c:	f023 0303 	bic.w	r3, r3, #3
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	e7e3      	b.n	80021e0 <__smakebuf_r+0xc>
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <__smakebuf_r+0x7c>)
 800221a:	62b3      	str	r3, [r6, #40]	; 0x28
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	6020      	str	r0, [r4, #0]
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	81a3      	strh	r3, [r4, #12]
 8002226:	9b00      	ldr	r3, [sp, #0]
 8002228:	6163      	str	r3, [r4, #20]
 800222a:	9b01      	ldr	r3, [sp, #4]
 800222c:	6120      	str	r0, [r4, #16]
 800222e:	b15b      	cbz	r3, 8002248 <__smakebuf_r+0x74>
 8002230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002234:	4630      	mov	r0, r6
 8002236:	f000 f889 	bl	800234c <_isatty_r>
 800223a:	b128      	cbz	r0, 8002248 <__smakebuf_r+0x74>
 800223c:	89a3      	ldrh	r3, [r4, #12]
 800223e:	f023 0303 	bic.w	r3, r3, #3
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	81a3      	strh	r3, [r4, #12]
 8002248:	89a0      	ldrh	r0, [r4, #12]
 800224a:	4305      	orrs	r5, r0
 800224c:	81a5      	strh	r5, [r4, #12]
 800224e:	e7cd      	b.n	80021ec <__smakebuf_r+0x18>
 8002250:	080014c9 	.word	0x080014c9

08002254 <__malloc_lock>:
 8002254:	4801      	ldr	r0, [pc, #4]	; (800225c <__malloc_lock+0x8>)
 8002256:	f7ff ba09 	b.w	800166c <__retarget_lock_acquire_recursive>
 800225a:	bf00      	nop
 800225c:	200000ec 	.word	0x200000ec

08002260 <__malloc_unlock>:
 8002260:	4801      	ldr	r0, [pc, #4]	; (8002268 <__malloc_unlock+0x8>)
 8002262:	f7ff ba04 	b.w	800166e <__retarget_lock_release_recursive>
 8002266:	bf00      	nop
 8002268:	200000ec 	.word	0x200000ec

0800226c <_free_r>:
 800226c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800226e:	2900      	cmp	r1, #0
 8002270:	d044      	beq.n	80022fc <_free_r+0x90>
 8002272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002276:	9001      	str	r0, [sp, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	f1a1 0404 	sub.w	r4, r1, #4
 800227e:	bfb8      	it	lt
 8002280:	18e4      	addlt	r4, r4, r3
 8002282:	f7ff ffe7 	bl	8002254 <__malloc_lock>
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <_free_r+0x94>)
 8002288:	9801      	ldr	r0, [sp, #4]
 800228a:	6813      	ldr	r3, [r2, #0]
 800228c:	b933      	cbnz	r3, 800229c <_free_r+0x30>
 800228e:	6063      	str	r3, [r4, #4]
 8002290:	6014      	str	r4, [r2, #0]
 8002292:	b003      	add	sp, #12
 8002294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002298:	f7ff bfe2 	b.w	8002260 <__malloc_unlock>
 800229c:	42a3      	cmp	r3, r4
 800229e:	d908      	bls.n	80022b2 <_free_r+0x46>
 80022a0:	6825      	ldr	r5, [r4, #0]
 80022a2:	1961      	adds	r1, r4, r5
 80022a4:	428b      	cmp	r3, r1
 80022a6:	bf01      	itttt	eq
 80022a8:	6819      	ldreq	r1, [r3, #0]
 80022aa:	685b      	ldreq	r3, [r3, #4]
 80022ac:	1949      	addeq	r1, r1, r5
 80022ae:	6021      	streq	r1, [r4, #0]
 80022b0:	e7ed      	b.n	800228e <_free_r+0x22>
 80022b2:	461a      	mov	r2, r3
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	b10b      	cbz	r3, 80022bc <_free_r+0x50>
 80022b8:	42a3      	cmp	r3, r4
 80022ba:	d9fa      	bls.n	80022b2 <_free_r+0x46>
 80022bc:	6811      	ldr	r1, [r2, #0]
 80022be:	1855      	adds	r5, r2, r1
 80022c0:	42a5      	cmp	r5, r4
 80022c2:	d10b      	bne.n	80022dc <_free_r+0x70>
 80022c4:	6824      	ldr	r4, [r4, #0]
 80022c6:	4421      	add	r1, r4
 80022c8:	1854      	adds	r4, r2, r1
 80022ca:	42a3      	cmp	r3, r4
 80022cc:	6011      	str	r1, [r2, #0]
 80022ce:	d1e0      	bne.n	8002292 <_free_r+0x26>
 80022d0:	681c      	ldr	r4, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	6053      	str	r3, [r2, #4]
 80022d6:	4421      	add	r1, r4
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	e7da      	b.n	8002292 <_free_r+0x26>
 80022dc:	d902      	bls.n	80022e4 <_free_r+0x78>
 80022de:	230c      	movs	r3, #12
 80022e0:	6003      	str	r3, [r0, #0]
 80022e2:	e7d6      	b.n	8002292 <_free_r+0x26>
 80022e4:	6825      	ldr	r5, [r4, #0]
 80022e6:	1961      	adds	r1, r4, r5
 80022e8:	428b      	cmp	r3, r1
 80022ea:	bf04      	itt	eq
 80022ec:	6819      	ldreq	r1, [r3, #0]
 80022ee:	685b      	ldreq	r3, [r3, #4]
 80022f0:	6063      	str	r3, [r4, #4]
 80022f2:	bf04      	itt	eq
 80022f4:	1949      	addeq	r1, r1, r5
 80022f6:	6021      	streq	r1, [r4, #0]
 80022f8:	6054      	str	r4, [r2, #4]
 80022fa:	e7ca      	b.n	8002292 <_free_r+0x26>
 80022fc:	b003      	add	sp, #12
 80022fe:	bd30      	pop	{r4, r5, pc}
 8002300:	200000f0 	.word	0x200000f0

08002304 <_read_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4d07      	ldr	r5, [pc, #28]	; (8002324 <_read_r+0x20>)
 8002308:	4604      	mov	r4, r0
 800230a:	4608      	mov	r0, r1
 800230c:	4611      	mov	r1, r2
 800230e:	2200      	movs	r2, #0
 8002310:	602a      	str	r2, [r5, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f7fe ff51 	bl	80011ba <_read>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_read_r+0x1e>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	b103      	cbz	r3, 8002322 <_read_r+0x1e>
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	200000f8 	.word	0x200000f8

08002328 <_fstat_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4d07      	ldr	r5, [pc, #28]	; (8002348 <_fstat_r+0x20>)
 800232c:	2300      	movs	r3, #0
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	602b      	str	r3, [r5, #0]
 8002336:	f7fe ff7a 	bl	800122e <_fstat>
 800233a:	1c43      	adds	r3, r0, #1
 800233c:	d102      	bne.n	8002344 <_fstat_r+0x1c>
 800233e:	682b      	ldr	r3, [r5, #0]
 8002340:	b103      	cbz	r3, 8002344 <_fstat_r+0x1c>
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	bd38      	pop	{r3, r4, r5, pc}
 8002346:	bf00      	nop
 8002348:	200000f8 	.word	0x200000f8

0800234c <_isatty_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4d06      	ldr	r5, [pc, #24]	; (8002368 <_isatty_r+0x1c>)
 8002350:	2300      	movs	r3, #0
 8002352:	4604      	mov	r4, r0
 8002354:	4608      	mov	r0, r1
 8002356:	602b      	str	r3, [r5, #0]
 8002358:	f7fe ff6e 	bl	8001238 <_isatty>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_isatty_r+0x1a>
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	b103      	cbz	r3, 8002366 <_isatty_r+0x1a>
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	200000f8 	.word	0x200000f8

0800236c <_init>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr

08002378 <_fini>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	bf00      	nop
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr
